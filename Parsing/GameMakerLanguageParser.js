// Generated from c:\_DEV\gamemaker-language-parser\GameMakerLanguageParser.g4 by ANTLR 4.9.2
// jshint ignore: start
import antlr4 from 'antlr4';
import GameMakerLanguageParserVisitor from './GameMakerLanguageParserVisitor.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003i\u0252\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u0003\u0002\u0005\u0002l\n\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0003\u0006\u0003q\n\u0003\r\u0003\u000e",
    "\u0003r\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u0088\n\u0004\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u008c\n\u0005\u0003\u0005\u0003\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u0093\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0098\n\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0005\u0007\u00a8\n\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00ac",
    "\n\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00b0\n\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007",
    "\u00b8\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\u000e\u0003\u000e\u0005\u000e\u00d3\n\u000e\u0003\u000e\u0003",
    "\u000e\u0005\u000e\u00d7\n\u000e\u0005\u000e\u00d9\n\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000f\u0006\u000f\u00de\n\u000f\r\u000f\u000e\u000f",
    "\u00df\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u00e6",
    "\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u00eb\n\u0011",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u00ef\n\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u00f7",
    "\n\u0013\f\u0013\u000e\u0013\u00fa\u000b\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0014\u0006\u0014\u00ff\n\u0014\r\u0014\u000e\u0014\u0100\u0003",
    "\u0014\u0005\u0014\u0104\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0109\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0118\n\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u011d\n\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007",
    "\u0018\u0125\n\u0018\f\u0018\u000e\u0018\u0128\u000b\u0018\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0007\u0019\u012d\n\u0019\f\u0019\u000e\u0019",
    "\u0130\u000b\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u0150\n\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u017f\n\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007",
    "\u001a\u0189\n\u001a\f\u001a\u000e\u001a\u018c\u000b\u001a\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u0198\n\u001d\f\u001d",
    "\u000e\u001d\u019b\u000b\u001d\u0003\u001d\u0005\u001d\u019e\n\u001d",
    "\u0005\u001d\u01a0\n\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u01b3\n \u0003!\u0003!\u0003",
    "!\u0003!\u0003\"\u0007\"\u01ba\n\"\f\"\u000e\"\u01bd\u000b\"\u0003\"",
    "\u0005\"\u01c0\n\"\u0003\"\u0006\"\u01c3\n\"\r\"\u000e\"\u01c4\u0003",
    "\"\u0007\"\u01c8\n\"\f\"\u000e\"\u01cb\u000b\"\u0003\"\u0007\"\u01ce",
    "\n\"\f\"\u000e\"\u01d1\u000b\"\u0003#\u0003#\u0003#\u0003#\u0007#\u01d7",
    "\n#\f#\u000e#\u01da\u000b#\u0003#\u0005#\u01dd\n#\u0005#\u01df\n#\u0003",
    "#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003",
    "%\u0007%\u01ec\n%\f%\u000e%\u01ef\u000b%\u0003%\u0005%\u01f2\n%\u0005",
    "%\u01f4\n%\u0003%\u0003%\u0003&\u0003&\u0003&\u0005&\u01fb\n&\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0005(\u0204\n(\u0003",
    ")\u0003)\u0005)\u0208\n)\u0003*\u0003*\u0005*\u020c\n*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0005*\u0213\n*\u0003*\u0003*\u0003*\u0003+\u0003",
    "+\u0003+\u0003+\u0005+\u021c\n+\u0003+\u0003+\u0003,\u0003,\u0003,\u0007",
    ",\u0223\n,\f,\u000e,\u0226\u000b,\u0003-\u0003-\u0003-\u0005-\u022b",
    "\n-\u0003.\u0003.\u0003.\u0003.\u0005.\u0231\n.\u0003/\u0006/\u0234",
    "\n/\r/\u000e/\u0235\u00030\u00030\u00030\u00050\u023b\n0\u00031\u0003",
    "1\u00071\u023f\n1\f1\u000e1\u0242\u000b1\u00031\u00051\u0245\n1\u0003",
    "2\u00032\u00033\u00033\u00034\u00034\u00035\u00035\u00035\u00055\u0250",
    "\n5\u00035\u0002\u0004.26\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfh\u0002\f\u0003\u0002\u0016\u0019\u0003\u0002\u0012\u0013\u0003",
    "\u0002\u001e\u001f\u0004\u0002\r\r$%\u0003\u0002 #\u0005\u0002\u001b",
    "\u001b((68\u0005\u0002\r\r\u001d\u001d,5\u0003\u0002gh\u0003\u0002]",
    "^\u0006\u0002@@BMPSUW\u0002\u0290\u0002k\u0003\u0002\u0002\u0002\u0004",
    "p\u0003\u0002\u0002\u0002\u0006\u0087\u0003\u0002\u0002\u0002\b\u0089",
    "\u0003\u0002\u0002\u0002\n\u008f\u0003\u0002\u0002\u0002\f\u00b7\u0003",
    "\u0002\u0002\u0002\u000e\u00b9\u0003\u0002\u0002\u0002\u0010\u00bf\u0003",
    "\u0002\u0002\u0002\u0012\u00c5\u0003\u0002\u0002\u0002\u0014\u00c8\u0003",
    "\u0002\u0002\u0002\u0016\u00cb\u0003\u0002\u0002\u0002\u0018\u00ce\u0003",
    "\u0002\u0002\u0002\u001a\u00d0\u0003\u0002\u0002\u0002\u001c\u00dd\u0003",
    "\u0002\u0002\u0002\u001e\u00e1\u0003\u0002\u0002\u0002 \u00e7\u0003",
    "\u0002\u0002\u0002\"\u00ec\u0003\u0002\u0002\u0002$\u00f2\u0003\u0002",
    "\u0002\u0002&\u0103\u0003\u0002\u0002\u0002(\u0105\u0003\u0002\u0002",
    "\u0002*\u010a\u0003\u0002\u0002\u0002,\u010d\u0003\u0002\u0002\u0002",
    ".\u0117\u0003\u0002\u0002\u00020\u0129\u0003\u0002\u0002\u00022\u014f",
    "\u0003\u0002\u0002\u00024\u018d\u0003\u0002\u0002\u00026\u0191\u0003",
    "\u0002\u0002\u00028\u0193\u0003\u0002\u0002\u0002:\u01a3\u0003\u0002",
    "\u0002\u0002<\u01a5\u0003\u0002\u0002\u0002>\u01b2\u0003\u0002\u0002",
    "\u0002@\u01b4\u0003\u0002\u0002\u0002B\u01bb\u0003\u0002\u0002\u0002",
    "D\u01d2\u0003\u0002\u0002\u0002F\u01e2\u0003\u0002\u0002\u0002H\u01e7",
    "\u0003\u0002\u0002\u0002J\u01f7\u0003\u0002\u0002\u0002L\u01fc\u0003",
    "\u0002\u0002\u0002N\u0203\u0003\u0002\u0002\u0002P\u0207\u0003\u0002",
    "\u0002\u0002R\u0209\u0003\u0002\u0002\u0002T\u0217\u0003\u0002\u0002",
    "\u0002V\u021f\u0003\u0002\u0002\u0002X\u0227\u0003\u0002\u0002\u0002",
    "Z\u022c\u0003\u0002\u0002\u0002\\\u0233\u0003\u0002\u0002\u0002^\u0237",
    "\u0003\u0002\u0002\u0002`\u023c\u0003\u0002\u0002\u0002b\u0246\u0003",
    "\u0002\u0002\u0002d\u0248\u0003\u0002\u0002\u0002f\u024a\u0003\u0002",
    "\u0002\u0002h\u024f\u0003\u0002\u0002\u0002jl\u0005\u0004\u0003\u0002",
    "kj\u0003\u0002\u0002\u0002kl\u0003\u0002\u0002\u0002lm\u0003\u0002\u0002",
    "\u0002mn\u0007\u0002\u0002\u0003n\u0003\u0003\u0002\u0002\u0002oq\u0005",
    "\u0006\u0004\u0002po\u0003\u0002\u0002\u0002qr\u0003\u0002\u0002\u0002",
    "rp\u0003\u0002\u0002\u0002rs\u0003\u0002\u0002\u0002s\u0005\u0003\u0002",
    "\u0002\u0002t\u0088\u0005\b\u0005\u0002u\u0088\u0005\u0018\r\u0002v",
    "\u0088\u0005Z.\u0002w\u0088\u0005\f\u0007\u0002x\u0088\u0005$\u0013",
    "\u0002y\u0088\u0005,\u0017\u0002z\u0088\u0005*\u0016\u0002{\u0088\u0005",
    "\n\u0006\u0002|\u0088\u0005\"\u0012\u0002}\u0088\u0005\u000e\b\u0002",
    "~\u0088\u0005\u0012\n\u0002\u007f\u0088\u0005\u0010\t\u0002\u0080\u0088",
    "\u0005\u0014\u000b\u0002\u0081\u0088\u0005\u0016\f\u0002\u0082\u0088",
    "\u0005R*\u0002\u0083\u0088\u0005F$\u0002\u0084\u0088\u0005T+\u0002\u0085",
    "\u0088\u0005^0\u0002\u0086\u0088\u0005`1\u0002\u0087t\u0003\u0002\u0002",
    "\u0002\u0087u\u0003\u0002\u0002\u0002\u0087v\u0003\u0002\u0002\u0002",
    "\u0087w\u0003\u0002\u0002\u0002\u0087x\u0003\u0002\u0002\u0002\u0087",
    "y\u0003\u0002\u0002\u0002\u0087z\u0003\u0002\u0002\u0002\u0087{\u0003",
    "\u0002\u0002\u0002\u0087|\u0003\u0002\u0002\u0002\u0087}\u0003\u0002",
    "\u0002\u0002\u0087~\u0003\u0002\u0002\u0002\u0087\u007f\u0003\u0002",
    "\u0002\u0002\u0087\u0080\u0003\u0002\u0002\u0002\u0087\u0081\u0003\u0002",
    "\u0002\u0002\u0087\u0082\u0003\u0002\u0002\u0002\u0087\u0083\u0003\u0002",
    "\u0002\u0002\u0087\u0084\u0003\u0002\u0002\u0002\u0087\u0085\u0003\u0002",
    "\u0002\u0002\u0087\u0086\u0003\u0002\u0002\u0002\u0088\u0007\u0003\u0002",
    "\u0002\u0002\u0089\u008b\u0007\t\u0002\u0002\u008a\u008c\u0005\u0004",
    "\u0003\u0002\u008b\u008a\u0003\u0002\u0002\u0002\u008b\u008c\u0003\u0002",
    "\u0002\u0002\u008c\u008d\u0003\u0002\u0002\u0002\u008d\u008e\u0007\n",
    "\u0002\u0002\u008e\t\u0003\u0002\u0002\u0002\u008f\u0090\u0007S\u0002",
    "\u0002\u0090\u0092\u00052\u001a\u0002\u0091\u0093\u0007T\u0002\u0002",
    "\u0092\u0091\u0003\u0002\u0002\u0002\u0092\u0093\u0003\u0002\u0002\u0002",
    "\u0093\u0094\u0003\u0002\u0002\u0002\u0094\u0097\u0005\u0006\u0004\u0002",
    "\u0095\u0096\u0007D\u0002\u0002\u0096\u0098\u0005\u0006\u0004\u0002",
    "\u0097\u0095\u0003\u0002\u0002\u0002\u0097\u0098\u0003\u0002\u0002\u0002",
    "\u0098\u000b\u0003\u0002\u0002\u0002\u0099\u009a\u0007B\u0002\u0002",
    "\u009a\u009b\u0005\u0006\u0004\u0002\u009b\u009c\u0007N\u0002\u0002",
    "\u009c\u009d\u00052\u001a\u0002\u009d\u009e\u0005h5\u0002\u009e\u00b8",
    "\u0003\u0002\u0002\u0002\u009f\u00a0\u0007M\u0002\u0002\u00a0\u00a1",
    "\u00052\u001a\u0002\u00a1\u00a2\u0005\u0006\u0004\u0002\u00a2\u00b8",
    "\u0003\u0002\u0002\u0002\u00a3\u00a4\u0007K\u0002\u0002\u00a4\u00a7",
    "\u0007\u0007\u0002\u0002\u00a5\u00a8\u0005$\u0013\u0002\u00a6\u00a8",
    "\u0005,\u0017\u0002\u00a7\u00a5\u0003\u0002\u0002\u0002\u00a7\u00a6",
    "\u0003\u0002\u0002\u0002\u00a7\u00a8\u0003\u0002\u0002\u0002\u00a8\u00a9",
    "\u0003\u0002\u0002\u0002\u00a9\u00ab\u0007\u000b\u0002\u0002\u00aa\u00ac",
    "\u00052\u001a\u0002\u00ab\u00aa\u0003\u0002\u0002\u0002\u00ab\u00ac",
    "\u0003\u0002\u0002\u0002\u00ac\u00ad\u0003\u0002\u0002\u0002\u00ad\u00af",
    "\u0007\u000b\u0002\u0002\u00ae\u00b0\u0005\u0006\u0004\u0002\u00af\u00ae",
    "\u0003\u0002\u0002\u0002\u00af\u00b0\u0003\u0002\u0002\u0002\u00b0\u00b1",
    "\u0003\u0002\u0002\u0002\u00b1\u00b2\u0007\b\u0002\u0002\u00b2\u00b8",
    "\u0005\u0006\u0004\u0002\u00b3\u00b4\u0007O\u0002\u0002\u00b4\u00b5",
    "\u00052\u001a\u0002\u00b5\u00b6\u0005\u0006\u0004\u0002\u00b6\u00b8",
    "\u0003\u0002\u0002\u0002\u00b7\u0099\u0003\u0002\u0002\u0002\u00b7\u009f",
    "\u0003\u0002\u0002\u0002\u00b7\u00a3\u0003\u0002\u0002\u0002\u00b7\u00b3",
    "\u0003\u0002\u0002\u0002\u00b8\r\u0003\u0002\u0002\u0002\u00b9\u00ba",
    "\u0007Q\u0002\u0002\u00ba\u00bb\u0007\u0007\u0002\u0002\u00bb\u00bc",
    "\u00052\u001a\u0002\u00bc\u00bd\u0007\b\u0002\u0002\u00bd\u00be\u0005",
    "\u0006\u0004\u0002\u00be\u000f\u0003\u0002\u0002\u0002\u00bf\u00c0\u0007",
    "L\u0002\u0002\u00c0\u00c1\u0007\u0007\u0002\u0002\u00c1\u00c2\u0005",
    "2\u001a\u0002\u00c2\u00c3\u0007\b\u0002\u0002\u00c3\u00c4\u0005\u001a",
    "\u000e\u0002\u00c4\u0011\u0003\u0002\u0002\u0002\u00c5\u00c6\u0007J",
    "\u0002\u0002\u00c6\u00c7\u0005h5\u0002\u00c7\u0013\u0003\u0002\u0002",
    "\u0002\u00c8\u00c9\u0007@\u0002\u0002\u00c9\u00ca\u0005h5\u0002\u00ca",
    "\u0015\u0003\u0002\u0002\u0002\u00cb\u00cc\u0007A\u0002\u0002\u00cc",
    "\u00cd\u0005h5\u0002\u00cd\u0017\u0003\u0002\u0002\u0002\u00ce\u00cf",
    "\u0007\u000b\u0002\u0002\u00cf\u0019\u0003\u0002\u0002\u0002\u00d0\u00d2",
    "\u0007\t\u0002\u0002\u00d1\u00d3\u0005\u001c\u000f\u0002\u00d2\u00d1",
    "\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003\u0002\u0002\u0002\u00d3\u00d8",
    "\u0003\u0002\u0002\u0002\u00d4\u00d6\u0005 \u0011\u0002\u00d5\u00d7",
    "\u0005\u001c\u000f\u0002\u00d6\u00d5\u0003\u0002\u0002\u0002\u00d6\u00d7",
    "\u0003\u0002\u0002\u0002\u00d7\u00d9\u0003\u0002\u0002\u0002\u00d8\u00d4",
    "\u0003\u0002\u0002\u0002\u00d8\u00d9\u0003\u0002\u0002\u0002\u00d9\u00da",
    "\u0003\u0002\u0002\u0002\u00da\u00db\u0007\n\u0002\u0002\u00db\u001b",
    "\u0003\u0002\u0002\u0002\u00dc\u00de\u0005\u001e\u0010\u0002\u00dd\u00dc",
    "\u0003\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002\u0002\u00df\u00dd",
    "\u0003\u0002\u0002\u0002\u00df\u00e0\u0003\u0002\u0002\u0002\u00e0\u001d",
    "\u0003\u0002\u0002\u0002\u00e1\u00e2\u0007C\u0002\u0002\u00e2\u00e3",
    "\u00050\u0019\u0002\u00e3\u00e5\u0007\u000e\u0002\u0002\u00e4\u00e6",
    "\u0005\u0004\u0003\u0002\u00e5\u00e4\u0003\u0002\u0002\u0002\u00e5\u00e6",
    "\u0003\u0002\u0002\u0002\u00e6\u001f\u0003\u0002\u0002\u0002\u00e7\u00e8",
    "\u0007R\u0002\u0002\u00e8\u00ea\u0007\u000e\u0002\u0002\u00e9\u00eb",
    "\u0005\u0004\u0003\u0002\u00ea\u00e9\u0003\u0002\u0002\u0002\u00ea\u00eb",
    "\u0003\u0002\u0002\u0002\u00eb!\u0003\u0002\u0002\u0002\u00ec\u00ee",
    "\u0007I\u0002\u0002\u00ed\u00ef\u00052\u001a\u0002\u00ee\u00ed\u0003",
    "\u0002\u0002\u0002\u00ee\u00ef\u0003\u0002\u0002\u0002\u00ef\u00f0\u0003",
    "\u0002\u0002\u0002\u00f0\u00f1\u0005h5\u0002\u00f1#\u0003\u0002\u0002",
    "\u0002\u00f2\u00f3\u0005&\u0014\u0002\u00f3\u00f8\u0005(\u0015\u0002",
    "\u00f4\u00f5\u0007\f\u0002\u0002\u00f5\u00f7\u0005(\u0015\u0002\u00f6",
    "\u00f4\u0003\u0002\u0002\u0002\u00f7\u00fa\u0003\u0002\u0002\u0002\u00f8",
    "\u00f6\u0003\u0002\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002\u00f9",
    "\u00fb\u0003\u0002\u0002\u0002\u00fa\u00f8\u0003\u0002\u0002\u0002\u00fb",
    "\u00fc\u0005h5\u0002\u00fc%\u0003\u0002\u0002\u0002\u00fd\u00ff\u0007",
    "F\u0002\u0002\u00fe\u00fd\u0003\u0002\u0002\u0002\u00ff\u0100\u0003",
    "\u0002\u0002\u0002\u0100\u00fe\u0003\u0002\u0002\u0002\u0100\u0101\u0003",
    "\u0002\u0002\u0002\u0101\u0104\u0003\u0002\u0002\u0002\u0102\u0104\u0007",
    "Z\u0002\u0002\u0103\u00fe\u0003\u0002\u0002\u0002\u0103\u0102\u0003",
    "\u0002\u0002\u0002\u0104\'\u0003\u0002\u0002\u0002\u0105\u0108\u0005",
    "P)\u0002\u0106\u0107\u0007\r\u0002\u0002\u0107\u0109\u00052\u001a\u0002",
    "\u0108\u0106\u0003\u0002\u0002\u0002\u0108\u0109\u0003\u0002\u0002\u0002",
    "\u0109)\u0003\u0002\u0002\u0002\u010a\u010b\u00052\u001a\u0002\u010b",
    "\u010c\u0005h5\u0002\u010c+\u0003\u0002\u0002\u0002\u010d\u010e\u0005",
    ".\u0018\u0002\u010e\u010f\u0005<\u001f\u0002\u010f\u0110\u00052\u001a",
    "\u0002\u0110-\u0003\u0002\u0002\u0002\u0111\u0112\b\u0018\u0001\u0002",
    "\u0112\u0118\u0005P)\u0002\u0113\u0114\u0007\u0007\u0002\u0002\u0114",
    "\u0115\u0005.\u0018\u0002\u0115\u0116\u0007\b\u0002\u0002\u0116\u0118",
    "\u0003\u0002\u0002\u0002\u0117\u0111\u0003\u0002\u0002\u0002\u0117\u0113",
    "\u0003\u0002\u0002\u0002\u0118\u0126\u0003\u0002\u0002\u0002\u0119\u011a",
    "\f\u0006\u0002\u0002\u011a\u011c\u0007\u0005\u0002\u0002\u011b\u011d",
    "\u00056\u001c\u0002\u011c\u011b\u0003\u0002\u0002\u0002\u011c\u011d",
    "\u0003\u0002\u0002\u0002\u011d\u011e\u0003\u0002\u0002\u0002\u011e\u011f",
    "\u00050\u0019\u0002\u011f\u0120\u0007\u0006\u0002\u0002\u0120\u0125",
    "\u0003\u0002\u0002\u0002\u0121\u0122\f\u0005\u0002\u0002\u0122\u0123",
    "\u0007\u000f\u0002\u0002\u0123\u0125\u0005P)\u0002\u0124\u0119\u0003",
    "\u0002\u0002\u0002\u0124\u0121\u0003\u0002\u0002\u0002\u0125\u0128\u0003",
    "\u0002\u0002\u0002\u0126\u0124\u0003\u0002\u0002\u0002\u0126\u0127\u0003",
    "\u0002\u0002\u0002\u0127/\u0003\u0002\u0002\u0002\u0128\u0126\u0003",
    "\u0002\u0002\u0002\u0129\u012e\u00052\u001a\u0002\u012a\u012b\u0007",
    "\f\u0002\u0002\u012b\u012d\u00052\u001a\u0002\u012c\u012a\u0003\u0002",
    "\u0002\u0002\u012d\u0130\u0003\u0002\u0002\u0002\u012e\u012c\u0003\u0002",
    "\u0002\u0002\u012e\u012f\u0003\u0002\u0002\u0002\u012f1\u0003\u0002",
    "\u0002\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0131\u0132\b\u001a",
    "\u0001\u0002\u0132\u0150\u00054\u001b\u0002\u0133\u0134\u0007E\u0002",
    "\u0002\u0134\u0135\u0005P)\u0002\u0135\u0136\u00058\u001d\u0002\u0136",
    "\u0150\u0003\u0002\u0002\u0002\u0137\u0138\u0007V\u0002\u0002\u0138",
    "\u0150\u00052\u001a\u001b\u0139\u013a\u0005.\u0018\u0002\u013a\u013b",
    "\u0007\u0010\u0002\u0002\u013b\u0150\u0003\u0002\u0002\u0002\u013c\u013d",
    "\u0005.\u0018\u0002\u013d\u013e\u0007\u0011\u0002\u0002\u013e\u0150",
    "\u0003\u0002\u0002\u0002\u013f\u0140\u0007\u0010\u0002\u0002\u0140\u0150",
    "\u0005.\u0018\u0002\u0141\u0142\u0007\u0011\u0002\u0002\u0142\u0150",
    "\u0005.\u0018\u0002\u0143\u0144\u0007\u0013\u0002\u0002\u0144\u0150",
    "\u00052\u001a\u0015\u0145\u0146\u0007\u0014\u0002\u0002\u0146\u0150",
    "\u00052\u001a\u0014\u0147\u0148\u0007\u0015\u0002\u0002\u0148\u0150",
    "\u00052\u001a\u0013\u0149\u0150\u0005P)\u0002\u014a\u0150\u0005> \u0002",
    "\u014b\u014c\u0007\u0007\u0002\u0002\u014c\u014d\u00052\u001a\u0002",
    "\u014d\u014e\u0007\b\u0002\u0002\u014e\u0150\u0003\u0002\u0002\u0002",
    "\u014f\u0131\u0003\u0002\u0002\u0002\u014f\u0133\u0003\u0002\u0002\u0002",
    "\u014f\u0137\u0003\u0002\u0002\u0002\u014f\u0139\u0003\u0002\u0002\u0002",
    "\u014f\u013c\u0003\u0002\u0002\u0002\u014f\u013f\u0003\u0002\u0002\u0002",
    "\u014f\u0141\u0003\u0002\u0002\u0002\u014f\u0143\u0003\u0002\u0002\u0002",
    "\u014f\u0145\u0003\u0002\u0002\u0002\u014f\u0147\u0003\u0002\u0002\u0002",
    "\u014f\u0149\u0003\u0002\u0002\u0002\u014f\u014a\u0003\u0002\u0002\u0002",
    "\u014f\u014b\u0003\u0002\u0002\u0002\u0150\u018a\u0003\u0002\u0002\u0002",
    "\u0151\u0152\f\u0012\u0002\u0002\u0152\u0153\t\u0002\u0002\u0002\u0153",
    "\u0189\u00052\u001a\u0013\u0154\u0155\f\u0011\u0002\u0002\u0155\u0156",
    "\t\u0003\u0002\u0002\u0156\u0189\u00052\u001a\u0012\u0157\u0158\f\u0010",
    "\u0002\u0002\u0158\u0159\u0007\u001c\u0002\u0002\u0159\u0189\u00052",
    "\u001a\u0011\u015a\u015b\f\u000f\u0002\u0002\u015b\u015c\t\u0004\u0002",
    "\u0002\u015c\u0189\u00052\u001a\u0010\u015d\u015e\f\u000e\u0002\u0002",
    "\u015e\u015f\u0007*\u0002\u0002\u015f\u0189\u00052\u001a\u000f\u0160",
    "\u0161\f\r\u0002\u0002\u0161\u0162\u0007)\u0002\u0002\u0162\u0189\u0005",
    "2\u001a\u000e\u0163\u0164\f\f\u0002\u0002\u0164\u0165\u0007+\u0002\u0002",
    "\u0165\u0189\u00052\u001a\r\u0166\u0167\f\u000b\u0002\u0002\u0167\u0168",
    "\t\u0005\u0002\u0002\u0168\u0189\u00052\u001a\f\u0169\u016a\f\n\u0002",
    "\u0002\u016a\u016b\t\u0006\u0002\u0002\u016b\u0189\u00052\u001a\u000b",
    "\u016c\u016d\f\t\u0002\u0002\u016d\u016e\u0007&\u0002\u0002\u016e\u0189",
    "\u00052\u001a\n\u016f\u0170\f\b\u0002\u0002\u0170\u0171\u0007(\u0002",
    "\u0002\u0171\u0189\u00052\u001a\t\u0172\u0173\f\u0007\u0002\u0002\u0173",
    "\u0174\u0007\'\u0002\u0002\u0174\u0189\u00052\u001a\b\u0175\u0176\f",
    "\u0006\u0002\u0002\u0176\u0177\u0007\u001b\u0002\u0002\u0177\u0178\u0005",
    "2\u001a\u0002\u0178\u0179\u0007\u000e\u0002\u0002\u0179\u017a\u0005",
    "2\u001a\u0007\u017a\u0189\u0003\u0002\u0002\u0002\u017b\u017c\f\u001e",
    "\u0002\u0002\u017c\u017e\u0007\u0005\u0002\u0002\u017d\u017f\u00056",
    "\u001c\u0002\u017e\u017d\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002",
    "\u0002\u0002\u017f\u0180\u0003\u0002\u0002\u0002\u0180\u0181\u00050",
    "\u0019\u0002\u0181\u0182\u0007\u0006\u0002\u0002\u0182\u0189\u0003\u0002",
    "\u0002\u0002\u0183\u0184\f\u001d\u0002\u0002\u0184\u0185\u0007\u000f",
    "\u0002\u0002\u0185\u0189\u0005P)\u0002\u0186\u0187\f\u0018\u0002\u0002",
    "\u0187\u0189\u00058\u001d\u0002\u0188\u0151\u0003\u0002\u0002\u0002",
    "\u0188\u0154\u0003\u0002\u0002\u0002\u0188\u0157\u0003\u0002\u0002\u0002",
    "\u0188\u015a\u0003\u0002\u0002\u0002\u0188\u015d\u0003\u0002\u0002\u0002",
    "\u0188\u0160\u0003\u0002\u0002\u0002\u0188\u0163\u0003\u0002\u0002\u0002",
    "\u0188\u0166\u0003\u0002\u0002\u0002\u0188\u0169\u0003\u0002\u0002\u0002",
    "\u0188\u016c\u0003\u0002\u0002\u0002\u0188\u016f\u0003\u0002\u0002\u0002",
    "\u0188\u0172\u0003\u0002\u0002\u0002\u0188\u0175\u0003\u0002\u0002\u0002",
    "\u0188\u017b\u0003\u0002\u0002\u0002\u0188\u0183\u0003\u0002\u0002\u0002",
    "\u0188\u0186\u0003\u0002\u0002\u0002\u0189\u018c\u0003\u0002\u0002\u0002",
    "\u018a\u0188\u0003\u0002\u0002\u0002\u018a\u018b\u0003\u0002\u0002\u0002",
    "\u018b3\u0003\u0002\u0002\u0002\u018c\u018a\u0003\u0002\u0002\u0002",
    "\u018d\u018e\u0007P\u0002\u0002\u018e\u018f\u00058\u001d\u0002\u018f",
    "\u0190\u0005\u0006\u0004\u0002\u01905\u0003\u0002\u0002\u0002\u0191",
    "\u0192\t\u0007\u0002\u0002\u01927\u0003\u0002\u0002\u0002\u0193\u019f",
    "\u0007\u0007\u0002\u0002\u0194\u0199\u0005:\u001e\u0002\u0195\u0196",
    "\u0007\f\u0002\u0002\u0196\u0198\u0005:\u001e\u0002\u0197\u0195\u0003",
    "\u0002\u0002\u0002\u0198\u019b\u0003\u0002\u0002\u0002\u0199\u0197\u0003",
    "\u0002\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002\u019a\u019d\u0003",
    "\u0002\u0002\u0002\u019b\u0199\u0003\u0002\u0002\u0002\u019c\u019e\u0007",
    "\f\u0002\u0002\u019d\u019c\u0003\u0002\u0002\u0002\u019d\u019e\u0003",
    "\u0002\u0002\u0002\u019e\u01a0\u0003\u0002\u0002\u0002\u019f\u0194\u0003",
    "\u0002\u0002\u0002\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003",
    "\u0002\u0002\u0002\u01a1\u01a2\u0007\b\u0002\u0002\u01a29\u0003\u0002",
    "\u0002\u0002\u01a3\u01a4\u00052\u001a\u0002\u01a4;\u0003\u0002\u0002",
    "\u0002\u01a5\u01a6\t\b\u0002\u0002\u01a6=\u0003\u0002\u0002\u0002\u01a7",
    "\u01b3\u00079\u0002\u0002\u01a8\u01b3\u0007:\u0002\u0002\u01a9\u01b3",
    "\u0007;\u0002\u0002\u01aa\u01b3\u0007`\u0002\u0002\u01ab\u01b3\u0007",
    "a\u0002\u0002\u01ac\u01b3\u0007?\u0002\u0002\u01ad\u01b3\u0007>\u0002",
    "\u0002\u01ae\u01b3\u0007=\u0002\u0002\u01af\u01b3\u0007<\u0002\u0002",
    "\u01b0\u01b3\u0005@!\u0002\u01b1\u01b3\u0005D#\u0002\u01b2\u01a7\u0003",
    "\u0002\u0002\u0002\u01b2\u01a8\u0003\u0002\u0002\u0002\u01b2\u01a9\u0003",
    "\u0002\u0002\u0002\u01b2\u01aa\u0003\u0002\u0002\u0002\u01b2\u01ab\u0003",
    "\u0002\u0002\u0002\u01b2\u01ac\u0003\u0002\u0002\u0002\u01b2\u01ad\u0003",
    "\u0002\u0002\u0002\u01b2\u01ae\u0003\u0002\u0002\u0002\u01b2\u01af\u0003",
    "\u0002\u0002\u0002\u01b2\u01b0\u0003\u0002\u0002\u0002\u01b2\u01b1\u0003",
    "\u0002\u0002\u0002\u01b3?\u0003\u0002\u0002\u0002\u01b4\u01b5\u0007",
    "\u0005\u0002\u0002\u01b5\u01b6\u0005B\"\u0002\u01b6\u01b7\u0007\u0006",
    "\u0002\u0002\u01b7A\u0003\u0002\u0002\u0002\u01b8\u01ba\u0007\f\u0002",
    "\u0002\u01b9\u01b8\u0003\u0002\u0002\u0002\u01ba\u01bd\u0003\u0002\u0002",
    "\u0002\u01bb\u01b9\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003\u0002\u0002",
    "\u0002\u01bc\u01bf\u0003\u0002\u0002\u0002\u01bd\u01bb\u0003\u0002\u0002",
    "\u0002\u01be\u01c0\u00052\u001a\u0002\u01bf\u01be\u0003\u0002\u0002",
    "\u0002\u01bf\u01c0\u0003\u0002\u0002\u0002\u01c0\u01c9\u0003\u0002\u0002",
    "\u0002\u01c1\u01c3\u0007\f\u0002\u0002\u01c2\u01c1\u0003\u0002\u0002",
    "\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c2\u0003\u0002\u0002",
    "\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c5\u01c6\u0003\u0002\u0002",
    "\u0002\u01c6\u01c8\u00052\u001a\u0002\u01c7\u01c2\u0003\u0002\u0002",
    "\u0002\u01c8\u01cb\u0003\u0002\u0002\u0002\u01c9\u01c7\u0003\u0002\u0002",
    "\u0002\u01c9\u01ca\u0003\u0002\u0002\u0002\u01ca\u01cf\u0003\u0002\u0002",
    "\u0002\u01cb\u01c9\u0003\u0002\u0002\u0002\u01cc\u01ce\u0007\f\u0002",
    "\u0002\u01cd\u01cc\u0003\u0002\u0002\u0002\u01ce\u01d1\u0003\u0002\u0002",
    "\u0002\u01cf\u01cd\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002",
    "\u0002\u01d0C\u0003\u0002\u0002\u0002\u01d1\u01cf\u0003\u0002\u0002",
    "\u0002\u01d2\u01de\u0007\t\u0002\u0002\u01d3\u01d8\u0005L\'\u0002\u01d4",
    "\u01d5\u0007\f\u0002\u0002\u01d5\u01d7\u0005L\'\u0002\u01d6\u01d4\u0003",
    "\u0002\u0002\u0002\u01d7\u01da\u0003\u0002\u0002\u0002\u01d8\u01d6\u0003",
    "\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9\u01dc\u0003",
    "\u0002\u0002\u0002\u01da\u01d8\u0003\u0002\u0002\u0002\u01db\u01dd\u0007",
    "\f\u0002\u0002\u01dc\u01db\u0003\u0002\u0002\u0002\u01dc\u01dd\u0003",
    "\u0002\u0002\u0002\u01dd\u01df\u0003\u0002\u0002\u0002\u01de\u01d3\u0003",
    "\u0002\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002\u01df\u01e0\u0003",
    "\u0002\u0002\u0002\u01e0\u01e1\u0007\n\u0002\u0002\u01e1E\u0003\u0002",
    "\u0002\u0002\u01e2\u01e3\u0007P\u0002\u0002\u01e3\u01e4\u0005P)\u0002",
    "\u01e4\u01e5\u0005H%\u0002\u01e5\u01e6\u0005\u0006\u0004\u0002\u01e6",
    "G\u0003\u0002\u0002\u0002\u01e7\u01f3\u0007\u0007\u0002\u0002\u01e8",
    "\u01ed\u0005J&\u0002\u01e9\u01ea\u0007\f\u0002\u0002\u01ea\u01ec\u0005",
    "J&\u0002\u01eb\u01e9\u0003\u0002\u0002\u0002\u01ec\u01ef\u0003\u0002",
    "\u0002\u0002\u01ed\u01eb\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002",
    "\u0002\u0002\u01ee\u01f1\u0003\u0002\u0002\u0002\u01ef\u01ed\u0003\u0002",
    "\u0002\u0002\u01f0\u01f2\u0007\f\u0002\u0002\u01f1\u01f0\u0003\u0002",
    "\u0002\u0002\u01f1\u01f2\u0003\u0002\u0002\u0002\u01f2\u01f4\u0003\u0002",
    "\u0002\u0002\u01f3\u01e8\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003\u0002",
    "\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5\u01f6\u0007\b",
    "\u0002\u0002\u01f6I\u0003\u0002\u0002\u0002\u01f7\u01fa\u0005P)\u0002",
    "\u01f8\u01f9\u0007\r\u0002\u0002\u01f9\u01fb\u00052\u001a\u0002\u01fa",
    "\u01f8\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002\u01fb",
    "K\u0003\u0002\u0002\u0002\u01fc\u01fd\u0005N(\u0002\u01fd\u01fe\u0007",
    "\u000e\u0002\u0002\u01fe\u01ff\u00052\u001a\u0002\u01ffM\u0003\u0002",
    "\u0002\u0002\u0200\u0204\u0007_\u0002\u0002\u0201\u0204\u0005d3\u0002",
    "\u0202\u0204\u0005f4\u0002\u0203\u0200\u0003\u0002\u0002\u0002\u0203",
    "\u0201\u0003\u0002\u0002\u0002\u0203\u0202\u0003\u0002\u0002\u0002\u0204",
    "O\u0003\u0002\u0002\u0002\u0205\u0208\u0007_\u0002\u0002\u0206\u0208",
    "\u0005d3\u0002\u0207\u0205\u0003\u0002\u0002\u0002\u0207\u0206\u0003",
    "\u0002\u0002\u0002\u0208Q\u0003\u0002\u0002\u0002\u0209\u020b\u0007",
    "P\u0002\u0002\u020a\u020c\u0005P)\u0002\u020b\u020a\u0003\u0002\u0002",
    "\u0002\u020b\u020c\u0003\u0002\u0002\u0002\u020c\u020d\u0003\u0002\u0002",
    "\u0002\u020d\u0212\u0005H%\u0002\u020e\u020f\u0007\u000e\u0002\u0002",
    "\u020f\u0210\u0005P)\u0002\u0210\u0211\u0005H%\u0002\u0211\u0213\u0003",
    "\u0002\u0002\u0002\u0212\u020e\u0003\u0002\u0002\u0002\u0212\u0213\u0003",
    "\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u0215\u0007",
    "Y\u0002\u0002\u0215\u0216\u0005\u0006\u0004\u0002\u0216S\u0003\u0002",
    "\u0002\u0002\u0217\u0218\u0007X\u0002\u0002\u0218\u0219\u0005P)\u0002",
    "\u0219\u021b\u0007\t\u0002\u0002\u021a\u021c\u0005V,\u0002\u021b\u021a",
    "\u0003\u0002\u0002\u0002\u021b\u021c\u0003\u0002\u0002\u0002\u021c\u021d",
    "\u0003\u0002\u0002\u0002\u021d\u021e\u0007\n\u0002\u0002\u021eU\u0003",
    "\u0002\u0002\u0002\u021f\u0224\u0005X-\u0002\u0220\u0221\u0007\f\u0002",
    "\u0002\u0221\u0223\u0005X-\u0002\u0222\u0220\u0003\u0002\u0002\u0002",
    "\u0223\u0226\u0003\u0002\u0002\u0002\u0224\u0222\u0003\u0002\u0002\u0002",
    "\u0224\u0225\u0003\u0002\u0002\u0002\u0225W\u0003\u0002\u0002\u0002",
    "\u0226\u0224\u0003\u0002\u0002\u0002\u0227\u022a\u0005P)\u0002\u0228",
    "\u0229\u0007\r\u0002\u0002\u0229\u022b\u0007<\u0002\u0002\u022a\u0228",
    "\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022bY",
    "\u0003\u0002\u0002\u0002\u022c\u022d\u0007[\u0002\u0002\u022d\u022e",
    "\u0007e\u0002\u0002\u022e\u0230\u0005\\/\u0002\u022f\u0231\u0007i\u0002",
    "\u0002\u0230\u022f\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002\u0002",
    "\u0002\u0231[\u0003\u0002\u0002\u0002\u0232\u0234\t\t\u0002\u0002\u0233",
    "\u0232\u0003\u0002\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235",
    "\u0233\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236",
    "]\u0003\u0002\u0002\u0002\u0237\u0238\u0007\\\u0002\u0002\u0238\u023a",
    "\u0007e\u0002\u0002\u0239\u023b\u0007i\u0002\u0002\u023a\u0239\u0003",
    "\u0002\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002\u023b_\u0003",
    "\u0002\u0002\u0002\u023c\u0240\t\n\u0002\u0002\u023d\u023f\u0007g\u0002",
    "\u0002\u023e\u023d\u0003\u0002\u0002\u0002\u023f\u0242\u0003\u0002\u0002",
    "\u0002\u0240\u023e\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002",
    "\u0002\u0241\u0244\u0003\u0002\u0002\u0002\u0242\u0240\u0003\u0002\u0002",
    "\u0002\u0243\u0245\u0007i\u0002\u0002\u0244\u0243\u0003\u0002\u0002",
    "\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245a\u0003\u0002\u0002",
    "\u0002\u0246\u0247\t\u000b\u0002\u0002\u0247c\u0003\u0002\u0002\u0002",
    "\u0248\u0249\u0007Y\u0002\u0002\u0249e\u0003\u0002\u0002\u0002\u024a",
    "\u024b\u0007:\u0002\u0002\u024bg\u0003\u0002\u0002\u0002\u024c\u0250",
    "\u0007\u000b\u0002\u0002\u024d\u0250\u00065\u0014\u0002\u024e\u0250",
    "\u00065\u0015\u0002\u024f\u024c\u0003\u0002\u0002\u0002\u024f\u024d",
    "\u0003\u0002\u0002\u0002\u024f\u024e\u0003\u0002\u0002\u0002\u0250i",
    "\u0003\u0002\u0002\u0002=kr\u0087\u008b\u0092\u0097\u00a7\u00ab\u00af",
    "\u00b7\u00d2\u00d6\u00d8\u00df\u00e5\u00ea\u00ee\u00f8\u0100\u0103\u0108",
    "\u0117\u011c\u0124\u0126\u012e\u014f\u017e\u0188\u018a\u0199\u019d\u019f",
    "\u01b2\u01bb\u01bf\u01c4\u01c9\u01cf\u01d8\u01dc\u01de\u01ed\u01f1\u01f3",
    "\u01fa\u0203\u0207\u020b\u0212\u021b\u0224\u022a\u0230\u0235\u023a\u0240",
    "\u0244\u024f"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class GameMakerLanguageParser extends antlr4.Parser {

    static grammarFileName = "GameMakerLanguageParser.g4";
    static literalNames = [ null, null, null, "'['", "']'", "'('", "')'", 
                            null, null, "';'", "','", null, "':'", "'.'", 
                            "'++'", "'--'", "'+'", "'-'", "'~'", null, "'*'", 
                            "'/'", "'div'", null, "'**'", "'?'", "'??'", 
                            "'??='", "'>>'", "'<<'", "'<'", "'>'", "'<='", 
                            "'>='", "'=='", null, "'&'", "'^'", "'|'", null, 
                            null, null, "'*='", "'/='", "'+='", "'-='", 
                            "'%='", "'<<='", "'>>='", "'&='", "'^='", "'|='", 
                            "'#'", "'$'", "'@'", "'undefined'", "'noone'", 
                            null, null, null, null, null, "'break'", "'exit'", 
                            "'do'", "'case'", "'else'", "'new'", "'var'", 
                            "'catch'", "'finally'", "'return'", "'continue'", 
                            "'for'", "'switch'", "'while'", "'until'", "'repeat'", 
                            "'function'", "'with'", "'default'", "'if'", 
                            "'then'", "'throw'", "'delete'", "'try'", "'enum'", 
                            "'constructor'", "'static'", "'#macro'", "'#define'", 
                            "'#region'", "'#endregion'" ];
    static symbolicNames = [ null, "MultiLineComment", "SingleLineComment", 
                             "OpenBracket", "CloseBracket", "OpenParen", 
                             "CloseParen", "OpenBrace", "CloseBrace", "SemiColon", 
                             "Comma", "Assign", "Colon", "Dot", "PlusPlus", 
                             "MinusMinus", "Plus", "Minus", "BitNot", "Not", 
                             "Multiply", "Divide", "IntegerDivide", "Modulo", 
                             "Power", "QuestionMark", "NullCoalesce", "NullCoalescingAssign", 
                             "RightShiftArithmetic", "LeftShiftArithmetic", 
                             "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                             "Equals_", "NotEquals", "BitAnd", "BitXOr", 
                             "BitOr", "And", "Or", "Xor", "MultiplyAssign", 
                             "DivideAssign", "PlusAssign", "MinusAssign", 
                             "ModulusAssign", "LeftShiftArithmeticAssign", 
                             "RightShiftArithmeticAssign", "BitAndAssign", 
                             "BitXorAssign", "BitOrAssign", "NumberSign", 
                             "DollarSign", "AtSign", "UndefinedLiteral", 
                             "NoOneLiteral", "BooleanLiteral", "IntegerLiteral", 
                             "DecimalLiteral", "BinaryLiteral", "HexIntegerLiteral", 
                             "Break", "Exit", "Do", "Case", "Else", "New", 
                             "Var", "Catch", "Finally", "Return", "Continue", 
                             "For", "Switch", "While", "Until", "Repeat", 
                             "Function_", "With", "Default", "If", "Then", 
                             "Throw", "Delete", "Try", "Enum", "Constructor", 
                             "Static", "Macro", "Define", "Region", "EndRegion", 
                             "Identifier", "StringLiteral", "VerbatimStringLiteral", 
                             "WhiteSpaces", "LineTerminator", "UnexpectedCharacter", 
                             "PpIdentifier", "PpWhiteSpaces", "PpBodyCharacters", 
                             "PpNewLineEscaped", "PpEnd" ];
    static ruleNames = [ "program", "statementList", "statement", "block", 
                         "ifStatement", "iterationStatement", "withStatement", 
                         "switchStatement", "continueStatement", "breakStatement", 
                         "exitStatement", "emptyStatement", "caseBlock", 
                         "caseClauses", "caseClause", "defaultClause", "returnStatement", 
                         "varDeclarationSequence", "varModifier", "varDeclaration", 
                         "expressionStatement", "assignmentStatement", "assignableExpression", 
                         "expressionSequence", "expression", "anonymousFunction", 
                         "accessorPrefix", "arguments", "argument", "assignmentOperator", 
                         "literal", "arrayLiteral", "elementList", "structLiteral", 
                         "functionDeclaration", "parameterList", "parameterArgument", 
                         "propertyAssignment", "propertyIdentifier", "identifier", 
                         "constructorDeclaration", "enumeratorDeclaration", 
                         "enumeratorList", "enumerator", "macroStatement", 
                         "macroBody", "defineStatement", "regionStatement", 
                         "keyword", "softKeyword", "propertySoftKeyword", 
                         "eos" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = GameMakerLanguageParser.ruleNames;
        this.literalNames = GameMakerLanguageParser.literalNames;
        this.symbolicNames = GameMakerLanguageParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 22:
    	    		return this.assignableExpression_sempred(localctx, predIndex);
    	case 24:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 51:
    	    		return this.eos_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    assignableExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 4);
    		case 1:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 16);
    		case 3:
    			return this.precpred(this._ctx, 15);
    		case 4:
    			return this.precpred(this._ctx, 14);
    		case 5:
    			return this.precpred(this._ctx, 13);
    		case 6:
    			return this.precpred(this._ctx, 12);
    		case 7:
    			return this.precpred(this._ctx, 11);
    		case 8:
    			return this.precpred(this._ctx, 10);
    		case 9:
    			return this.precpred(this._ctx, 9);
    		case 10:
    			return this.precpred(this._ctx, 8);
    		case 11:
    			return this.precpred(this._ctx, 7);
    		case 12:
    			return this.precpred(this._ctx, 6);
    		case 13:
    			return this.precpred(this._ctx, 5);
    		case 14:
    			return this.precpred(this._ctx, 4);
    		case 15:
    			return this.precpred(this._ctx, 28);
    		case 16:
    			return this.precpred(this._ctx, 27);
    		case 17:
    			return this.precpred(this._ctx, 22);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    eos_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 18:
    			return this.lineTerminatorAhead();
    		case 19:
    			return this.closeBrace();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, GameMakerLanguageParser.RULE_program);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 105;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GameMakerLanguageParser.OpenBracket) | (1 << GameMakerLanguageParser.OpenParen) | (1 << GameMakerLanguageParser.OpenBrace) | (1 << GameMakerLanguageParser.SemiColon) | (1 << GameMakerLanguageParser.PlusPlus) | (1 << GameMakerLanguageParser.MinusMinus) | (1 << GameMakerLanguageParser.Minus) | (1 << GameMakerLanguageParser.BitNot) | (1 << GameMakerLanguageParser.Not))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (GameMakerLanguageParser.UndefinedLiteral - 55)) | (1 << (GameMakerLanguageParser.NoOneLiteral - 55)) | (1 << (GameMakerLanguageParser.BooleanLiteral - 55)) | (1 << (GameMakerLanguageParser.IntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.DecimalLiteral - 55)) | (1 << (GameMakerLanguageParser.BinaryLiteral - 55)) | (1 << (GameMakerLanguageParser.HexIntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.Break - 55)) | (1 << (GameMakerLanguageParser.Exit - 55)) | (1 << (GameMakerLanguageParser.Do - 55)) | (1 << (GameMakerLanguageParser.New - 55)) | (1 << (GameMakerLanguageParser.Var - 55)) | (1 << (GameMakerLanguageParser.Return - 55)) | (1 << (GameMakerLanguageParser.Continue - 55)) | (1 << (GameMakerLanguageParser.For - 55)) | (1 << (GameMakerLanguageParser.Switch - 55)) | (1 << (GameMakerLanguageParser.While - 55)) | (1 << (GameMakerLanguageParser.Repeat - 55)) | (1 << (GameMakerLanguageParser.Function_ - 55)) | (1 << (GameMakerLanguageParser.With - 55)) | (1 << (GameMakerLanguageParser.If - 55)) | (1 << (GameMakerLanguageParser.Delete - 55)) | (1 << (GameMakerLanguageParser.Enum - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (GameMakerLanguageParser.Constructor - 87)) | (1 << (GameMakerLanguageParser.Static - 87)) | (1 << (GameMakerLanguageParser.Macro - 87)) | (1 << (GameMakerLanguageParser.Define - 87)) | (1 << (GameMakerLanguageParser.Region - 87)) | (1 << (GameMakerLanguageParser.EndRegion - 87)) | (1 << (GameMakerLanguageParser.Identifier - 87)) | (1 << (GameMakerLanguageParser.StringLiteral - 87)) | (1 << (GameMakerLanguageParser.VerbatimStringLiteral - 87)))) !== 0)) {
	            this.state = 104;
	            this.statementList();
	        }

	        this.state = 107;
	        this.match(GameMakerLanguageParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, GameMakerLanguageParser.RULE_statementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 110; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 109;
	            this.statement();
	            this.state = 112; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GameMakerLanguageParser.OpenBracket) | (1 << GameMakerLanguageParser.OpenParen) | (1 << GameMakerLanguageParser.OpenBrace) | (1 << GameMakerLanguageParser.SemiColon) | (1 << GameMakerLanguageParser.PlusPlus) | (1 << GameMakerLanguageParser.MinusMinus) | (1 << GameMakerLanguageParser.Minus) | (1 << GameMakerLanguageParser.BitNot) | (1 << GameMakerLanguageParser.Not))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (GameMakerLanguageParser.UndefinedLiteral - 55)) | (1 << (GameMakerLanguageParser.NoOneLiteral - 55)) | (1 << (GameMakerLanguageParser.BooleanLiteral - 55)) | (1 << (GameMakerLanguageParser.IntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.DecimalLiteral - 55)) | (1 << (GameMakerLanguageParser.BinaryLiteral - 55)) | (1 << (GameMakerLanguageParser.HexIntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.Break - 55)) | (1 << (GameMakerLanguageParser.Exit - 55)) | (1 << (GameMakerLanguageParser.Do - 55)) | (1 << (GameMakerLanguageParser.New - 55)) | (1 << (GameMakerLanguageParser.Var - 55)) | (1 << (GameMakerLanguageParser.Return - 55)) | (1 << (GameMakerLanguageParser.Continue - 55)) | (1 << (GameMakerLanguageParser.For - 55)) | (1 << (GameMakerLanguageParser.Switch - 55)) | (1 << (GameMakerLanguageParser.While - 55)) | (1 << (GameMakerLanguageParser.Repeat - 55)) | (1 << (GameMakerLanguageParser.Function_ - 55)) | (1 << (GameMakerLanguageParser.With - 55)) | (1 << (GameMakerLanguageParser.If - 55)) | (1 << (GameMakerLanguageParser.Delete - 55)) | (1 << (GameMakerLanguageParser.Enum - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (GameMakerLanguageParser.Constructor - 87)) | (1 << (GameMakerLanguageParser.Static - 87)) | (1 << (GameMakerLanguageParser.Macro - 87)) | (1 << (GameMakerLanguageParser.Define - 87)) | (1 << (GameMakerLanguageParser.Region - 87)) | (1 << (GameMakerLanguageParser.EndRegion - 87)) | (1 << (GameMakerLanguageParser.Identifier - 87)) | (1 << (GameMakerLanguageParser.StringLiteral - 87)) | (1 << (GameMakerLanguageParser.VerbatimStringLiteral - 87)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, GameMakerLanguageParser.RULE_statement);
	    try {
	        this.state = 133;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 114;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 115;
	            this.emptyStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 116;
	            this.macroStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 117;
	            this.iterationStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 118;
	            this.varDeclarationSequence();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 119;
	            this.assignmentStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 120;
	            this.expressionStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 121;
	            this.ifStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 122;
	            this.returnStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 123;
	            this.withStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 124;
	            this.continueStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 125;
	            this.switchStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 126;
	            this.breakStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 127;
	            this.exitStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 128;
	            this.constructorDeclaration();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 129;
	            this.functionDeclaration();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 130;
	            this.enumeratorDeclaration();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 131;
	            this.defineStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 132;
	            this.regionStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, GameMakerLanguageParser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 135;
	        this.match(GameMakerLanguageParser.OpenBrace);
	        this.state = 137;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GameMakerLanguageParser.OpenBracket) | (1 << GameMakerLanguageParser.OpenParen) | (1 << GameMakerLanguageParser.OpenBrace) | (1 << GameMakerLanguageParser.SemiColon) | (1 << GameMakerLanguageParser.PlusPlus) | (1 << GameMakerLanguageParser.MinusMinus) | (1 << GameMakerLanguageParser.Minus) | (1 << GameMakerLanguageParser.BitNot) | (1 << GameMakerLanguageParser.Not))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (GameMakerLanguageParser.UndefinedLiteral - 55)) | (1 << (GameMakerLanguageParser.NoOneLiteral - 55)) | (1 << (GameMakerLanguageParser.BooleanLiteral - 55)) | (1 << (GameMakerLanguageParser.IntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.DecimalLiteral - 55)) | (1 << (GameMakerLanguageParser.BinaryLiteral - 55)) | (1 << (GameMakerLanguageParser.HexIntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.Break - 55)) | (1 << (GameMakerLanguageParser.Exit - 55)) | (1 << (GameMakerLanguageParser.Do - 55)) | (1 << (GameMakerLanguageParser.New - 55)) | (1 << (GameMakerLanguageParser.Var - 55)) | (1 << (GameMakerLanguageParser.Return - 55)) | (1 << (GameMakerLanguageParser.Continue - 55)) | (1 << (GameMakerLanguageParser.For - 55)) | (1 << (GameMakerLanguageParser.Switch - 55)) | (1 << (GameMakerLanguageParser.While - 55)) | (1 << (GameMakerLanguageParser.Repeat - 55)) | (1 << (GameMakerLanguageParser.Function_ - 55)) | (1 << (GameMakerLanguageParser.With - 55)) | (1 << (GameMakerLanguageParser.If - 55)) | (1 << (GameMakerLanguageParser.Delete - 55)) | (1 << (GameMakerLanguageParser.Enum - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (GameMakerLanguageParser.Constructor - 87)) | (1 << (GameMakerLanguageParser.Static - 87)) | (1 << (GameMakerLanguageParser.Macro - 87)) | (1 << (GameMakerLanguageParser.Define - 87)) | (1 << (GameMakerLanguageParser.Region - 87)) | (1 << (GameMakerLanguageParser.EndRegion - 87)) | (1 << (GameMakerLanguageParser.Identifier - 87)) | (1 << (GameMakerLanguageParser.StringLiteral - 87)) | (1 << (GameMakerLanguageParser.VerbatimStringLiteral - 87)))) !== 0)) {
	            this.state = 136;
	            this.statementList();
	        }

	        this.state = 139;
	        this.match(GameMakerLanguageParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, GameMakerLanguageParser.RULE_ifStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 141;
	        this.match(GameMakerLanguageParser.If);
	        this.state = 142;
	        this.expression(0);
	        this.state = 144;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GameMakerLanguageParser.Then) {
	            this.state = 143;
	            this.match(GameMakerLanguageParser.Then);
	        }

	        this.state = 146;
	        this.statement();
	        this.state = 149;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        if(la_===1) {
	            this.state = 147;
	            this.match(GameMakerLanguageParser.Else);
	            this.state = 148;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, GameMakerLanguageParser.RULE_iterationStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 181;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GameMakerLanguageParser.Do:
	            localctx = new DoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 151;
	            this.match(GameMakerLanguageParser.Do);
	            this.state = 152;
	            this.statement();
	            this.state = 153;
	            this.match(GameMakerLanguageParser.Until);
	            this.state = 154;
	            this.expression(0);
	            this.state = 155;
	            this.eos();
	            break;
	        case GameMakerLanguageParser.While:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 157;
	            this.match(GameMakerLanguageParser.While);
	            this.state = 158;
	            this.expression(0);
	            this.state = 159;
	            this.statement();
	            break;
	        case GameMakerLanguageParser.For:
	            localctx = new ForStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 161;
	            this.match(GameMakerLanguageParser.For);
	            this.state = 162;
	            this.match(GameMakerLanguageParser.OpenParen);
	            this.state = 165;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case GameMakerLanguageParser.Var:
	            case GameMakerLanguageParser.Static:
	            	this.state = 163;
	            	this.varDeclarationSequence();
	            	break;
	            case GameMakerLanguageParser.OpenParen:
	            case GameMakerLanguageParser.Constructor:
	            case GameMakerLanguageParser.Identifier:
	            	this.state = 164;
	            	this.assignmentStatement();
	            	break;
	            case GameMakerLanguageParser.SemiColon:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 167;
	            this.match(GameMakerLanguageParser.SemiColon);
	            this.state = 169;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GameMakerLanguageParser.OpenBracket) | (1 << GameMakerLanguageParser.OpenParen) | (1 << GameMakerLanguageParser.OpenBrace) | (1 << GameMakerLanguageParser.PlusPlus) | (1 << GameMakerLanguageParser.MinusMinus) | (1 << GameMakerLanguageParser.Minus) | (1 << GameMakerLanguageParser.BitNot) | (1 << GameMakerLanguageParser.Not))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (GameMakerLanguageParser.UndefinedLiteral - 55)) | (1 << (GameMakerLanguageParser.NoOneLiteral - 55)) | (1 << (GameMakerLanguageParser.BooleanLiteral - 55)) | (1 << (GameMakerLanguageParser.IntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.DecimalLiteral - 55)) | (1 << (GameMakerLanguageParser.BinaryLiteral - 55)) | (1 << (GameMakerLanguageParser.HexIntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.New - 55)) | (1 << (GameMakerLanguageParser.Function_ - 55)) | (1 << (GameMakerLanguageParser.Delete - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (GameMakerLanguageParser.Constructor - 87)) | (1 << (GameMakerLanguageParser.Identifier - 87)) | (1 << (GameMakerLanguageParser.StringLiteral - 87)) | (1 << (GameMakerLanguageParser.VerbatimStringLiteral - 87)))) !== 0)) {
	                this.state = 168;
	                this.expression(0);
	            }

	            this.state = 171;
	            this.match(GameMakerLanguageParser.SemiColon);
	            this.state = 173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GameMakerLanguageParser.OpenBracket) | (1 << GameMakerLanguageParser.OpenParen) | (1 << GameMakerLanguageParser.OpenBrace) | (1 << GameMakerLanguageParser.SemiColon) | (1 << GameMakerLanguageParser.PlusPlus) | (1 << GameMakerLanguageParser.MinusMinus) | (1 << GameMakerLanguageParser.Minus) | (1 << GameMakerLanguageParser.BitNot) | (1 << GameMakerLanguageParser.Not))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (GameMakerLanguageParser.UndefinedLiteral - 55)) | (1 << (GameMakerLanguageParser.NoOneLiteral - 55)) | (1 << (GameMakerLanguageParser.BooleanLiteral - 55)) | (1 << (GameMakerLanguageParser.IntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.DecimalLiteral - 55)) | (1 << (GameMakerLanguageParser.BinaryLiteral - 55)) | (1 << (GameMakerLanguageParser.HexIntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.Break - 55)) | (1 << (GameMakerLanguageParser.Exit - 55)) | (1 << (GameMakerLanguageParser.Do - 55)) | (1 << (GameMakerLanguageParser.New - 55)) | (1 << (GameMakerLanguageParser.Var - 55)) | (1 << (GameMakerLanguageParser.Return - 55)) | (1 << (GameMakerLanguageParser.Continue - 55)) | (1 << (GameMakerLanguageParser.For - 55)) | (1 << (GameMakerLanguageParser.Switch - 55)) | (1 << (GameMakerLanguageParser.While - 55)) | (1 << (GameMakerLanguageParser.Repeat - 55)) | (1 << (GameMakerLanguageParser.Function_ - 55)) | (1 << (GameMakerLanguageParser.With - 55)) | (1 << (GameMakerLanguageParser.If - 55)) | (1 << (GameMakerLanguageParser.Delete - 55)) | (1 << (GameMakerLanguageParser.Enum - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (GameMakerLanguageParser.Constructor - 87)) | (1 << (GameMakerLanguageParser.Static - 87)) | (1 << (GameMakerLanguageParser.Macro - 87)) | (1 << (GameMakerLanguageParser.Define - 87)) | (1 << (GameMakerLanguageParser.Region - 87)) | (1 << (GameMakerLanguageParser.EndRegion - 87)) | (1 << (GameMakerLanguageParser.Identifier - 87)) | (1 << (GameMakerLanguageParser.StringLiteral - 87)) | (1 << (GameMakerLanguageParser.VerbatimStringLiteral - 87)))) !== 0)) {
	                this.state = 172;
	                this.statement();
	            }

	            this.state = 175;
	            this.match(GameMakerLanguageParser.CloseParen);
	            this.state = 176;
	            this.statement();
	            break;
	        case GameMakerLanguageParser.Repeat:
	            localctx = new RepeatStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 177;
	            this.match(GameMakerLanguageParser.Repeat);
	            this.state = 178;
	            this.expression(0);
	            this.state = 179;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStatement() {
	    let localctx = new WithStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, GameMakerLanguageParser.RULE_withStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 183;
	        this.match(GameMakerLanguageParser.With);
	        this.state = 184;
	        this.match(GameMakerLanguageParser.OpenParen);
	        this.state = 185;
	        this.expression(0);
	        this.state = 186;
	        this.match(GameMakerLanguageParser.CloseParen);
	        this.state = 187;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, GameMakerLanguageParser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 189;
	        this.match(GameMakerLanguageParser.Switch);
	        this.state = 190;
	        this.match(GameMakerLanguageParser.OpenParen);
	        this.state = 191;
	        this.expression(0);
	        this.state = 192;
	        this.match(GameMakerLanguageParser.CloseParen);
	        this.state = 193;
	        this.caseBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, GameMakerLanguageParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 195;
	        this.match(GameMakerLanguageParser.Continue);
	        this.state = 196;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, GameMakerLanguageParser.RULE_breakStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 198;
	        this.match(GameMakerLanguageParser.Break);
	        this.state = 199;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exitStatement() {
	    let localctx = new ExitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, GameMakerLanguageParser.RULE_exitStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 201;
	        this.match(GameMakerLanguageParser.Exit);
	        this.state = 202;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement() {
	    let localctx = new EmptyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, GameMakerLanguageParser.RULE_emptyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 204;
	        this.match(GameMakerLanguageParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseBlock() {
	    let localctx = new CaseBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, GameMakerLanguageParser.RULE_caseBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 206;
	        this.match(GameMakerLanguageParser.OpenBrace);
	        this.state = 208;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GameMakerLanguageParser.Case) {
	            this.state = 207;
	            this.caseClauses();
	        }

	        this.state = 214;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GameMakerLanguageParser.Default) {
	            this.state = 210;
	            this.defaultClause();
	            this.state = 212;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===GameMakerLanguageParser.Case) {
	                this.state = 211;
	                this.caseClauses();
	            }

	        }

	        this.state = 216;
	        this.match(GameMakerLanguageParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClauses() {
	    let localctx = new CaseClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, GameMakerLanguageParser.RULE_caseClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 219; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 218;
	            this.caseClause();
	            this.state = 221; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===GameMakerLanguageParser.Case);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClause() {
	    let localctx = new CaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, GameMakerLanguageParser.RULE_caseClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 223;
	        this.match(GameMakerLanguageParser.Case);
	        this.state = 224;
	        this.expressionSequence();
	        this.state = 225;
	        this.match(GameMakerLanguageParser.Colon);
	        this.state = 227;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GameMakerLanguageParser.OpenBracket) | (1 << GameMakerLanguageParser.OpenParen) | (1 << GameMakerLanguageParser.OpenBrace) | (1 << GameMakerLanguageParser.SemiColon) | (1 << GameMakerLanguageParser.PlusPlus) | (1 << GameMakerLanguageParser.MinusMinus) | (1 << GameMakerLanguageParser.Minus) | (1 << GameMakerLanguageParser.BitNot) | (1 << GameMakerLanguageParser.Not))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (GameMakerLanguageParser.UndefinedLiteral - 55)) | (1 << (GameMakerLanguageParser.NoOneLiteral - 55)) | (1 << (GameMakerLanguageParser.BooleanLiteral - 55)) | (1 << (GameMakerLanguageParser.IntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.DecimalLiteral - 55)) | (1 << (GameMakerLanguageParser.BinaryLiteral - 55)) | (1 << (GameMakerLanguageParser.HexIntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.Break - 55)) | (1 << (GameMakerLanguageParser.Exit - 55)) | (1 << (GameMakerLanguageParser.Do - 55)) | (1 << (GameMakerLanguageParser.New - 55)) | (1 << (GameMakerLanguageParser.Var - 55)) | (1 << (GameMakerLanguageParser.Return - 55)) | (1 << (GameMakerLanguageParser.Continue - 55)) | (1 << (GameMakerLanguageParser.For - 55)) | (1 << (GameMakerLanguageParser.Switch - 55)) | (1 << (GameMakerLanguageParser.While - 55)) | (1 << (GameMakerLanguageParser.Repeat - 55)) | (1 << (GameMakerLanguageParser.Function_ - 55)) | (1 << (GameMakerLanguageParser.With - 55)) | (1 << (GameMakerLanguageParser.If - 55)) | (1 << (GameMakerLanguageParser.Delete - 55)) | (1 << (GameMakerLanguageParser.Enum - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (GameMakerLanguageParser.Constructor - 87)) | (1 << (GameMakerLanguageParser.Static - 87)) | (1 << (GameMakerLanguageParser.Macro - 87)) | (1 << (GameMakerLanguageParser.Define - 87)) | (1 << (GameMakerLanguageParser.Region - 87)) | (1 << (GameMakerLanguageParser.EndRegion - 87)) | (1 << (GameMakerLanguageParser.Identifier - 87)) | (1 << (GameMakerLanguageParser.StringLiteral - 87)) | (1 << (GameMakerLanguageParser.VerbatimStringLiteral - 87)))) !== 0)) {
	            this.state = 226;
	            this.statementList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultClause() {
	    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, GameMakerLanguageParser.RULE_defaultClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 229;
	        this.match(GameMakerLanguageParser.Default);
	        this.state = 230;
	        this.match(GameMakerLanguageParser.Colon);
	        this.state = 232;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GameMakerLanguageParser.OpenBracket) | (1 << GameMakerLanguageParser.OpenParen) | (1 << GameMakerLanguageParser.OpenBrace) | (1 << GameMakerLanguageParser.SemiColon) | (1 << GameMakerLanguageParser.PlusPlus) | (1 << GameMakerLanguageParser.MinusMinus) | (1 << GameMakerLanguageParser.Minus) | (1 << GameMakerLanguageParser.BitNot) | (1 << GameMakerLanguageParser.Not))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (GameMakerLanguageParser.UndefinedLiteral - 55)) | (1 << (GameMakerLanguageParser.NoOneLiteral - 55)) | (1 << (GameMakerLanguageParser.BooleanLiteral - 55)) | (1 << (GameMakerLanguageParser.IntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.DecimalLiteral - 55)) | (1 << (GameMakerLanguageParser.BinaryLiteral - 55)) | (1 << (GameMakerLanguageParser.HexIntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.Break - 55)) | (1 << (GameMakerLanguageParser.Exit - 55)) | (1 << (GameMakerLanguageParser.Do - 55)) | (1 << (GameMakerLanguageParser.New - 55)) | (1 << (GameMakerLanguageParser.Var - 55)) | (1 << (GameMakerLanguageParser.Return - 55)) | (1 << (GameMakerLanguageParser.Continue - 55)) | (1 << (GameMakerLanguageParser.For - 55)) | (1 << (GameMakerLanguageParser.Switch - 55)) | (1 << (GameMakerLanguageParser.While - 55)) | (1 << (GameMakerLanguageParser.Repeat - 55)) | (1 << (GameMakerLanguageParser.Function_ - 55)) | (1 << (GameMakerLanguageParser.With - 55)) | (1 << (GameMakerLanguageParser.If - 55)) | (1 << (GameMakerLanguageParser.Delete - 55)) | (1 << (GameMakerLanguageParser.Enum - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (GameMakerLanguageParser.Constructor - 87)) | (1 << (GameMakerLanguageParser.Static - 87)) | (1 << (GameMakerLanguageParser.Macro - 87)) | (1 << (GameMakerLanguageParser.Define - 87)) | (1 << (GameMakerLanguageParser.Region - 87)) | (1 << (GameMakerLanguageParser.EndRegion - 87)) | (1 << (GameMakerLanguageParser.Identifier - 87)) | (1 << (GameMakerLanguageParser.StringLiteral - 87)) | (1 << (GameMakerLanguageParser.VerbatimStringLiteral - 87)))) !== 0)) {
	            this.state = 231;
	            this.statementList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, GameMakerLanguageParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 234;
	        this.match(GameMakerLanguageParser.Return);
	        this.state = 236;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        if(la_===1) {
	            this.state = 235;
	            this.expression(0);

	        }
	        this.state = 238;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varDeclarationSequence() {
	    let localctx = new VarDeclarationSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, GameMakerLanguageParser.RULE_varDeclarationSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 240;
	        this.varModifier();
	        this.state = 241;
	        this.varDeclaration();
	        this.state = 246;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 242;
	                this.match(GameMakerLanguageParser.Comma);
	                this.state = 243;
	                this.varDeclaration(); 
	            }
	            this.state = 248;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	        }

	        this.state = 249;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varModifier() {
	    let localctx = new VarModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, GameMakerLanguageParser.RULE_varModifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 257;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GameMakerLanguageParser.Var:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 252; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 251;
	                this.match(GameMakerLanguageParser.Var);
	                this.state = 254; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===GameMakerLanguageParser.Var);
	            break;
	        case GameMakerLanguageParser.Static:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 256;
	            this.match(GameMakerLanguageParser.Static);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varDeclaration() {
	    let localctx = new VarDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, GameMakerLanguageParser.RULE_varDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this.identifier();
	        this.state = 262;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 260;
	            this.match(GameMakerLanguageParser.Assign);
	            this.state = 261;
	            this.expression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, GameMakerLanguageParser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 264;
	        this.expression(0);
	        this.state = 265;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentStatement() {
	    let localctx = new AssignmentStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, GameMakerLanguageParser.RULE_assignmentStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267;
	        this.assignableExpression(0);
	        this.state = 268;
	        this.assignmentOperator();
	        this.state = 269;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	assignableExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new AssignableExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 44;
	    this.enterRecursionRule(localctx, 44, GameMakerLanguageParser.RULE_assignableExpression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 277;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GameMakerLanguageParser.Constructor:
	        case GameMakerLanguageParser.Identifier:
	            localctx = new IdentifierAssignableContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 272;
	            this.identifier();
	            break;
	        case GameMakerLanguageParser.OpenParen:
	            localctx = new ParenthesizedAssignableContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 273;
	            this.match(GameMakerLanguageParser.OpenParen);
	            this.state = 274;
	            this.assignableExpression(0);
	            this.state = 275;
	            this.match(GameMakerLanguageParser.CloseParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 292;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 290;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MemberIndexAssignableContext(this, new AssignableExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_assignableExpression);
	                    this.state = 279;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 280;
	                    this.match(GameMakerLanguageParser.OpenBracket);
	                    this.state = 282;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (GameMakerLanguageParser.QuestionMark - 25)) | (1 << (GameMakerLanguageParser.BitOr - 25)) | (1 << (GameMakerLanguageParser.NumberSign - 25)) | (1 << (GameMakerLanguageParser.DollarSign - 25)) | (1 << (GameMakerLanguageParser.AtSign - 25)))) !== 0)) {
	                        this.state = 281;
	                        this.accessorPrefix();
	                    }

	                    this.state = 284;
	                    this.expressionSequence();
	                    this.state = 285;
	                    this.match(GameMakerLanguageParser.CloseBracket);
	                    break;

	                case 2:
	                    localctx = new MemberDotAssignableContext(this, new AssignableExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_assignableExpression);
	                    this.state = 287;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 288;
	                    this.match(GameMakerLanguageParser.Dot);
	                    this.state = 289;
	                    this.identifier();
	                    break;

	                } 
	            }
	            this.state = 294;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	expressionSequence() {
	    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, GameMakerLanguageParser.RULE_expressionSequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 295;
	        this.expression(0);
	        this.state = 300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===GameMakerLanguageParser.Comma) {
	            this.state = 296;
	            this.match(GameMakerLanguageParser.Comma);
	            this.state = 297;
	            this.expression(0);
	            this.state = 302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 48;
	    this.enterRecursionRule(localctx, 48, GameMakerLanguageParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 333;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 304;
	            this.anonymousFunction();
	            break;

	        case 2:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 305;
	            this.match(GameMakerLanguageParser.New);
	            this.state = 306;
	            this.identifier();
	            this.state = 307;
	            this.arguments();
	            break;

	        case 3:
	            localctx = new DeleteExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 309;
	            this.match(GameMakerLanguageParser.Delete);
	            this.state = 310;
	            this.expression(25);
	            break;

	        case 4:
	            localctx = new PostIncrementExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 311;
	            this.assignableExpression(0);
	            this.state = 312;
	            this.match(GameMakerLanguageParser.PlusPlus);
	            break;

	        case 5:
	            localctx = new PostDecreaseExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 314;
	            this.assignableExpression(0);
	            this.state = 315;
	            this.match(GameMakerLanguageParser.MinusMinus);
	            break;

	        case 6:
	            localctx = new PreIncrementExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 317;
	            this.match(GameMakerLanguageParser.PlusPlus);
	            this.state = 318;
	            this.assignableExpression(0);
	            break;

	        case 7:
	            localctx = new PreDecreaseExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 319;
	            this.match(GameMakerLanguageParser.MinusMinus);
	            this.state = 320;
	            this.assignableExpression(0);
	            break;

	        case 8:
	            localctx = new UnaryMinusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 321;
	            this.match(GameMakerLanguageParser.Minus);
	            this.state = 322;
	            this.expression(19);
	            break;

	        case 9:
	            localctx = new BitNotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 323;
	            this.match(GameMakerLanguageParser.BitNot);
	            this.state = 324;
	            this.expression(18);
	            break;

	        case 10:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 325;
	            this.match(GameMakerLanguageParser.Not);
	            this.state = 326;
	            this.expression(17);
	            break;

	        case 11:
	            localctx = new IdentifierExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 327;
	            this.identifier();
	            break;

	        case 12:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 328;
	            this.literal();
	            break;

	        case 13:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 329;
	            this.match(GameMakerLanguageParser.OpenParen);
	            this.state = 330;
	            this.expression(0);
	            this.state = 331;
	            this.match(GameMakerLanguageParser.CloseParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 392;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 390;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultiplicativeExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 335;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 336;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GameMakerLanguageParser.Multiply) | (1 << GameMakerLanguageParser.Divide) | (1 << GameMakerLanguageParser.IntegerDivide) | (1 << GameMakerLanguageParser.Modulo))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 337;
	                    this.expression(17);
	                    break;

	                case 2:
	                    localctx = new AdditiveExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 338;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 339;
	                    _la = this._input.LA(1);
	                    if(!(_la===GameMakerLanguageParser.Plus || _la===GameMakerLanguageParser.Minus)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 340;
	                    this.expression(16);
	                    break;

	                case 3:
	                    localctx = new CoalesceExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 341;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 342;
	                    this.match(GameMakerLanguageParser.NullCoalesce);
	                    this.state = 343;
	                    this.expression(15);
	                    break;

	                case 4:
	                    localctx = new BitShiftExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 344;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 345;
	                    _la = this._input.LA(1);
	                    if(!(_la===GameMakerLanguageParser.RightShiftArithmetic || _la===GameMakerLanguageParser.LeftShiftArithmetic)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 346;
	                    this.expression(14);
	                    break;

	                case 5:
	                    localctx = new LogicalOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 347;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 348;
	                    this.match(GameMakerLanguageParser.Or);
	                    this.state = 349;
	                    this.expression(13);
	                    break;

	                case 6:
	                    localctx = new LogicalAndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 350;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 351;
	                    this.match(GameMakerLanguageParser.And);
	                    this.state = 352;
	                    this.expression(12);
	                    break;

	                case 7:
	                    localctx = new LogicalXorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 353;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 354;
	                    this.match(GameMakerLanguageParser.Xor);
	                    this.state = 355;
	                    this.expression(11);
	                    break;

	                case 8:
	                    localctx = new EqualityExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 356;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 357;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (GameMakerLanguageParser.Assign - 11)) | (1 << (GameMakerLanguageParser.Equals_ - 11)) | (1 << (GameMakerLanguageParser.NotEquals - 11)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 358;
	                    this.expression(10);
	                    break;

	                case 9:
	                    localctx = new RelationalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 359;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 360;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (GameMakerLanguageParser.LessThan - 30)) | (1 << (GameMakerLanguageParser.MoreThan - 30)) | (1 << (GameMakerLanguageParser.LessThanEquals - 30)) | (1 << (GameMakerLanguageParser.GreaterThanEquals - 30)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 361;
	                    this.expression(9);
	                    break;

	                case 10:
	                    localctx = new BitAndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 362;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 363;
	                    this.match(GameMakerLanguageParser.BitAnd);
	                    this.state = 364;
	                    this.expression(8);
	                    break;

	                case 11:
	                    localctx = new BitOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 365;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 366;
	                    this.match(GameMakerLanguageParser.BitOr);
	                    this.state = 367;
	                    this.expression(7);
	                    break;

	                case 12:
	                    localctx = new BitXOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 368;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 369;
	                    this.match(GameMakerLanguageParser.BitXOr);
	                    this.state = 370;
	                    this.expression(6);
	                    break;

	                case 13:
	                    localctx = new TernaryExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 371;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 372;
	                    this.match(GameMakerLanguageParser.QuestionMark);
	                    this.state = 373;
	                    this.expression(0);
	                    this.state = 374;
	                    this.match(GameMakerLanguageParser.Colon);
	                    this.state = 375;
	                    this.expression(5);
	                    break;

	                case 14:
	                    localctx = new MemberIndexExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 377;
	                    if (!( this.precpred(this._ctx, 28))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
	                    }
	                    this.state = 378;
	                    this.match(GameMakerLanguageParser.OpenBracket);
	                    this.state = 380;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (GameMakerLanguageParser.QuestionMark - 25)) | (1 << (GameMakerLanguageParser.BitOr - 25)) | (1 << (GameMakerLanguageParser.NumberSign - 25)) | (1 << (GameMakerLanguageParser.DollarSign - 25)) | (1 << (GameMakerLanguageParser.AtSign - 25)))) !== 0)) {
	                        this.state = 379;
	                        this.accessorPrefix();
	                    }

	                    this.state = 382;
	                    this.expressionSequence();
	                    this.state = 383;
	                    this.match(GameMakerLanguageParser.CloseBracket);
	                    break;

	                case 15:
	                    localctx = new MemberDotExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 385;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 386;
	                    this.match(GameMakerLanguageParser.Dot);
	                    this.state = 387;
	                    this.identifier();
	                    break;

	                case 16:
	                    localctx = new ArgumentsExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GameMakerLanguageParser.RULE_expression);
	                    this.state = 388;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 389;
	                    this.arguments();
	                    break;

	                } 
	            }
	            this.state = 394;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	anonymousFunction() {
	    let localctx = new AnonymousFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, GameMakerLanguageParser.RULE_anonymousFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 395;
	        this.match(GameMakerLanguageParser.Function_);
	        this.state = 396;
	        this.arguments();
	        this.state = 397;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessorPrefix() {
	    let localctx = new AccessorPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, GameMakerLanguageParser.RULE_accessorPrefix);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 399;
	        _la = this._input.LA(1);
	        if(!(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (GameMakerLanguageParser.QuestionMark - 25)) | (1 << (GameMakerLanguageParser.BitOr - 25)) | (1 << (GameMakerLanguageParser.NumberSign - 25)) | (1 << (GameMakerLanguageParser.DollarSign - 25)) | (1 << (GameMakerLanguageParser.AtSign - 25)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, GameMakerLanguageParser.RULE_arguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this.match(GameMakerLanguageParser.OpenParen);
	        this.state = 413;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GameMakerLanguageParser.OpenBracket) | (1 << GameMakerLanguageParser.OpenParen) | (1 << GameMakerLanguageParser.OpenBrace) | (1 << GameMakerLanguageParser.PlusPlus) | (1 << GameMakerLanguageParser.MinusMinus) | (1 << GameMakerLanguageParser.Minus) | (1 << GameMakerLanguageParser.BitNot) | (1 << GameMakerLanguageParser.Not))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (GameMakerLanguageParser.UndefinedLiteral - 55)) | (1 << (GameMakerLanguageParser.NoOneLiteral - 55)) | (1 << (GameMakerLanguageParser.BooleanLiteral - 55)) | (1 << (GameMakerLanguageParser.IntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.DecimalLiteral - 55)) | (1 << (GameMakerLanguageParser.BinaryLiteral - 55)) | (1 << (GameMakerLanguageParser.HexIntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.New - 55)) | (1 << (GameMakerLanguageParser.Function_ - 55)) | (1 << (GameMakerLanguageParser.Delete - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (GameMakerLanguageParser.Constructor - 87)) | (1 << (GameMakerLanguageParser.Identifier - 87)) | (1 << (GameMakerLanguageParser.StringLiteral - 87)) | (1 << (GameMakerLanguageParser.VerbatimStringLiteral - 87)))) !== 0)) {
	            this.state = 402;
	            this.argument();
	            this.state = 407;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 403;
	                    this.match(GameMakerLanguageParser.Comma);
	                    this.state = 404;
	                    this.argument(); 
	                }
	                this.state = 409;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
	            }

	            this.state = 411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===GameMakerLanguageParser.Comma) {
	                this.state = 410;
	                this.match(GameMakerLanguageParser.Comma);
	            }

	        }

	        this.state = 415;
	        this.match(GameMakerLanguageParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, GameMakerLanguageParser.RULE_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 417;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, GameMakerLanguageParser.RULE_assignmentOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 419;
	        _la = this._input.LA(1);
	        if(!(_la===GameMakerLanguageParser.Assign || _la===GameMakerLanguageParser.NullCoalescingAssign || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (GameMakerLanguageParser.MultiplyAssign - 42)) | (1 << (GameMakerLanguageParser.DivideAssign - 42)) | (1 << (GameMakerLanguageParser.PlusAssign - 42)) | (1 << (GameMakerLanguageParser.MinusAssign - 42)) | (1 << (GameMakerLanguageParser.ModulusAssign - 42)) | (1 << (GameMakerLanguageParser.LeftShiftArithmeticAssign - 42)) | (1 << (GameMakerLanguageParser.RightShiftArithmeticAssign - 42)) | (1 << (GameMakerLanguageParser.BitAndAssign - 42)) | (1 << (GameMakerLanguageParser.BitXorAssign - 42)) | (1 << (GameMakerLanguageParser.BitOrAssign - 42)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, GameMakerLanguageParser.RULE_literal);
	    try {
	        this.state = 432;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GameMakerLanguageParser.UndefinedLiteral:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 421;
	            this.match(GameMakerLanguageParser.UndefinedLiteral);
	            break;
	        case GameMakerLanguageParser.NoOneLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 422;
	            this.match(GameMakerLanguageParser.NoOneLiteral);
	            break;
	        case GameMakerLanguageParser.BooleanLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 423;
	            this.match(GameMakerLanguageParser.BooleanLiteral);
	            break;
	        case GameMakerLanguageParser.StringLiteral:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 424;
	            this.match(GameMakerLanguageParser.StringLiteral);
	            break;
	        case GameMakerLanguageParser.VerbatimStringLiteral:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 425;
	            this.match(GameMakerLanguageParser.VerbatimStringLiteral);
	            break;
	        case GameMakerLanguageParser.HexIntegerLiteral:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 426;
	            this.match(GameMakerLanguageParser.HexIntegerLiteral);
	            break;
	        case GameMakerLanguageParser.BinaryLiteral:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 427;
	            this.match(GameMakerLanguageParser.BinaryLiteral);
	            break;
	        case GameMakerLanguageParser.DecimalLiteral:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 428;
	            this.match(GameMakerLanguageParser.DecimalLiteral);
	            break;
	        case GameMakerLanguageParser.IntegerLiteral:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 429;
	            this.match(GameMakerLanguageParser.IntegerLiteral);
	            break;
	        case GameMakerLanguageParser.OpenBracket:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 430;
	            this.arrayLiteral();
	            break;
	        case GameMakerLanguageParser.OpenBrace:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 431;
	            this.structLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayLiteral() {
	    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, GameMakerLanguageParser.RULE_arrayLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 434;
	        this.match(GameMakerLanguageParser.OpenBracket);
	        this.state = 435;
	        this.elementList();
	        this.state = 436;
	        this.match(GameMakerLanguageParser.CloseBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementList() {
	    let localctx = new ElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, GameMakerLanguageParser.RULE_elementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 441;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 438;
	                this.match(GameMakerLanguageParser.Comma); 
	            }
	            this.state = 443;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
	        }

	        this.state = 445;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GameMakerLanguageParser.OpenBracket) | (1 << GameMakerLanguageParser.OpenParen) | (1 << GameMakerLanguageParser.OpenBrace) | (1 << GameMakerLanguageParser.PlusPlus) | (1 << GameMakerLanguageParser.MinusMinus) | (1 << GameMakerLanguageParser.Minus) | (1 << GameMakerLanguageParser.BitNot) | (1 << GameMakerLanguageParser.Not))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (GameMakerLanguageParser.UndefinedLiteral - 55)) | (1 << (GameMakerLanguageParser.NoOneLiteral - 55)) | (1 << (GameMakerLanguageParser.BooleanLiteral - 55)) | (1 << (GameMakerLanguageParser.IntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.DecimalLiteral - 55)) | (1 << (GameMakerLanguageParser.BinaryLiteral - 55)) | (1 << (GameMakerLanguageParser.HexIntegerLiteral - 55)) | (1 << (GameMakerLanguageParser.New - 55)) | (1 << (GameMakerLanguageParser.Function_ - 55)) | (1 << (GameMakerLanguageParser.Delete - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (GameMakerLanguageParser.Constructor - 87)) | (1 << (GameMakerLanguageParser.Identifier - 87)) | (1 << (GameMakerLanguageParser.StringLiteral - 87)) | (1 << (GameMakerLanguageParser.VerbatimStringLiteral - 87)))) !== 0)) {
	            this.state = 444;
	            this.expression(0);
	        }

	        this.state = 455;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 448; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 447;
	                    this.match(GameMakerLanguageParser.Comma);
	                    this.state = 450; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===GameMakerLanguageParser.Comma);
	                this.state = 452;
	                this.expression(0); 
	            }
	            this.state = 457;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	        }

	        this.state = 461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===GameMakerLanguageParser.Comma) {
	            this.state = 458;
	            this.match(GameMakerLanguageParser.Comma);
	            this.state = 463;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structLiteral() {
	    let localctx = new StructLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, GameMakerLanguageParser.RULE_structLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 464;
	        this.match(GameMakerLanguageParser.OpenBrace);
	        this.state = 476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GameMakerLanguageParser.NoOneLiteral || _la===GameMakerLanguageParser.Constructor || _la===GameMakerLanguageParser.Identifier) {
	            this.state = 465;
	            this.propertyAssignment();
	            this.state = 470;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 466;
	                    this.match(GameMakerLanguageParser.Comma);
	                    this.state = 467;
	                    this.propertyAssignment(); 
	                }
	                this.state = 472;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
	            }

	            this.state = 474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===GameMakerLanguageParser.Comma) {
	                this.state = 473;
	                this.match(GameMakerLanguageParser.Comma);
	            }

	        }

	        this.state = 478;
	        this.match(GameMakerLanguageParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, GameMakerLanguageParser.RULE_functionDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 480;
	        this.match(GameMakerLanguageParser.Function_);
	        this.state = 481;
	        this.identifier();
	        this.state = 482;
	        this.parameterList();
	        this.state = 483;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterList() {
	    let localctx = new ParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, GameMakerLanguageParser.RULE_parameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        this.match(GameMakerLanguageParser.OpenParen);
	        this.state = 497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GameMakerLanguageParser.Constructor || _la===GameMakerLanguageParser.Identifier) {
	            this.state = 486;
	            this.parameterArgument();
	            this.state = 491;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,42,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 487;
	                    this.match(GameMakerLanguageParser.Comma);
	                    this.state = 488;
	                    this.parameterArgument(); 
	                }
	                this.state = 493;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,42,this._ctx);
	            }

	            this.state = 495;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===GameMakerLanguageParser.Comma) {
	                this.state = 494;
	                this.match(GameMakerLanguageParser.Comma);
	            }

	        }

	        this.state = 499;
	        this.match(GameMakerLanguageParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterArgument() {
	    let localctx = new ParameterArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, GameMakerLanguageParser.RULE_parameterArgument);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 501;
	        this.identifier();
	        this.state = 504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GameMakerLanguageParser.Assign) {
	            this.state = 502;
	            this.match(GameMakerLanguageParser.Assign);
	            this.state = 503;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyAssignment() {
	    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, GameMakerLanguageParser.RULE_propertyAssignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 506;
	        this.propertyIdentifier();
	        this.state = 507;
	        this.match(GameMakerLanguageParser.Colon);
	        this.state = 508;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyIdentifier() {
	    let localctx = new PropertyIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, GameMakerLanguageParser.RULE_propertyIdentifier);
	    try {
	        this.state = 513;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GameMakerLanguageParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 510;
	            this.match(GameMakerLanguageParser.Identifier);
	            break;
	        case GameMakerLanguageParser.Constructor:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 511;
	            this.softKeyword();
	            break;
	        case GameMakerLanguageParser.NoOneLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 512;
	            this.propertySoftKeyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, GameMakerLanguageParser.RULE_identifier);
	    try {
	        this.state = 517;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case GameMakerLanguageParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 515;
	            this.match(GameMakerLanguageParser.Identifier);
	            break;
	        case GameMakerLanguageParser.Constructor:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 516;
	            this.softKeyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclaration() {
	    let localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, GameMakerLanguageParser.RULE_constructorDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 519;
	        this.match(GameMakerLanguageParser.Function_);
	        this.state = 521;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GameMakerLanguageParser.Constructor || _la===GameMakerLanguageParser.Identifier) {
	            this.state = 520;
	            this.identifier();
	        }

	        this.state = 523;
	        this.parameterList();
	        this.state = 528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GameMakerLanguageParser.Colon) {
	            this.state = 524;
	            this.match(GameMakerLanguageParser.Colon);
	            this.state = 525;
	            this.identifier();
	            this.state = 526;
	            this.parameterList();
	        }

	        this.state = 530;
	        this.match(GameMakerLanguageParser.Constructor);
	        this.state = 531;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeratorDeclaration() {
	    let localctx = new EnumeratorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, GameMakerLanguageParser.RULE_enumeratorDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.match(GameMakerLanguageParser.Enum);
	        this.state = 534;
	        this.identifier();
	        this.state = 535;
	        this.match(GameMakerLanguageParser.OpenBrace);
	        this.state = 537;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GameMakerLanguageParser.Constructor || _la===GameMakerLanguageParser.Identifier) {
	            this.state = 536;
	            this.enumeratorList();
	        }

	        this.state = 539;
	        this.match(GameMakerLanguageParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeratorList() {
	    let localctx = new EnumeratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, GameMakerLanguageParser.RULE_enumeratorList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 541;
	        this.enumerator();
	        this.state = 546;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===GameMakerLanguageParser.Comma) {
	            this.state = 542;
	            this.match(GameMakerLanguageParser.Comma);
	            this.state = 543;
	            this.enumerator();
	            this.state = 548;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerator() {
	    let localctx = new EnumeratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, GameMakerLanguageParser.RULE_enumerator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 549;
	        this.identifier();
	        this.state = 552;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===GameMakerLanguageParser.Assign) {
	            this.state = 550;
	            this.match(GameMakerLanguageParser.Assign);
	            this.state = 551;
	            this.match(GameMakerLanguageParser.IntegerLiteral);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroStatement() {
	    let localctx = new MacroStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, GameMakerLanguageParser.RULE_macroStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.match(GameMakerLanguageParser.Macro);
	        this.state = 555;
	        this.match(GameMakerLanguageParser.PpIdentifier);
	        this.state = 556;
	        this.macroBody();
	        this.state = 558;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        if(la_===1) {
	            this.state = 557;
	            this.match(GameMakerLanguageParser.PpEnd);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroBody() {
	    let localctx = new MacroBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, GameMakerLanguageParser.RULE_macroBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 560;
	        		_la = this._input.LA(1);
	        		if(!(_la===GameMakerLanguageParser.PpBodyCharacters || _la===GameMakerLanguageParser.PpNewLineEscaped)) {
	        		this._errHandler.recoverInline(this);
	        		}
	        		else {
	        			this._errHandler.reportMatch(this);
	        		    this.consume();
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 563; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,54, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defineStatement() {
	    let localctx = new DefineStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, GameMakerLanguageParser.RULE_defineStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 565;
	        this.match(GameMakerLanguageParser.Define);
	        this.state = 566;
	        this.match(GameMakerLanguageParser.PpIdentifier);
	        this.state = 568;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        if(la_===1) {
	            this.state = 567;
	            this.match(GameMakerLanguageParser.PpEnd);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regionStatement() {
	    let localctx = new RegionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, GameMakerLanguageParser.RULE_regionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 570;
	        _la = this._input.LA(1);
	        if(!(_la===GameMakerLanguageParser.Region || _la===GameMakerLanguageParser.EndRegion)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 574;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 571;
	                this.match(GameMakerLanguageParser.PpBodyCharacters); 
	            }
	            this.state = 576;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
	        }

	        this.state = 578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        if(la_===1) {
	            this.state = 577;
	            this.match(GameMakerLanguageParser.PpEnd);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, GameMakerLanguageParser.RULE_keyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 580;
	        _la = this._input.LA(1);
	        if(!(((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (GameMakerLanguageParser.Break - 62)) | (1 << (GameMakerLanguageParser.Do - 62)) | (1 << (GameMakerLanguageParser.Case - 62)) | (1 << (GameMakerLanguageParser.Else - 62)) | (1 << (GameMakerLanguageParser.New - 62)) | (1 << (GameMakerLanguageParser.Var - 62)) | (1 << (GameMakerLanguageParser.Catch - 62)) | (1 << (GameMakerLanguageParser.Finally - 62)) | (1 << (GameMakerLanguageParser.Return - 62)) | (1 << (GameMakerLanguageParser.Continue - 62)) | (1 << (GameMakerLanguageParser.For - 62)) | (1 << (GameMakerLanguageParser.Switch - 62)) | (1 << (GameMakerLanguageParser.While - 62)) | (1 << (GameMakerLanguageParser.Function_ - 62)) | (1 << (GameMakerLanguageParser.With - 62)) | (1 << (GameMakerLanguageParser.Default - 62)) | (1 << (GameMakerLanguageParser.If - 62)) | (1 << (GameMakerLanguageParser.Throw - 62)) | (1 << (GameMakerLanguageParser.Delete - 62)) | (1 << (GameMakerLanguageParser.Try - 62)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	softKeyword() {
	    let localctx = new SoftKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, GameMakerLanguageParser.RULE_softKeyword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 582;
	        this.match(GameMakerLanguageParser.Constructor);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertySoftKeyword() {
	    let localctx = new PropertySoftKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, GameMakerLanguageParser.RULE_propertySoftKeyword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        this.match(GameMakerLanguageParser.NoOneLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eos() {
	    let localctx = new EosContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, GameMakerLanguageParser.RULE_eos);
	    try {
	        this.state = 589;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 586;
	            this.match(GameMakerLanguageParser.SemiColon);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 587;
	            if (!( this.lineTerminatorAhead())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 588;
	            if (!( this.closeBrace())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.closeBrace()");
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

GameMakerLanguageParser.EOF = antlr4.Token.EOF;
GameMakerLanguageParser.MultiLineComment = 1;
GameMakerLanguageParser.SingleLineComment = 2;
GameMakerLanguageParser.OpenBracket = 3;
GameMakerLanguageParser.CloseBracket = 4;
GameMakerLanguageParser.OpenParen = 5;
GameMakerLanguageParser.CloseParen = 6;
GameMakerLanguageParser.OpenBrace = 7;
GameMakerLanguageParser.CloseBrace = 8;
GameMakerLanguageParser.SemiColon = 9;
GameMakerLanguageParser.Comma = 10;
GameMakerLanguageParser.Assign = 11;
GameMakerLanguageParser.Colon = 12;
GameMakerLanguageParser.Dot = 13;
GameMakerLanguageParser.PlusPlus = 14;
GameMakerLanguageParser.MinusMinus = 15;
GameMakerLanguageParser.Plus = 16;
GameMakerLanguageParser.Minus = 17;
GameMakerLanguageParser.BitNot = 18;
GameMakerLanguageParser.Not = 19;
GameMakerLanguageParser.Multiply = 20;
GameMakerLanguageParser.Divide = 21;
GameMakerLanguageParser.IntegerDivide = 22;
GameMakerLanguageParser.Modulo = 23;
GameMakerLanguageParser.Power = 24;
GameMakerLanguageParser.QuestionMark = 25;
GameMakerLanguageParser.NullCoalesce = 26;
GameMakerLanguageParser.NullCoalescingAssign = 27;
GameMakerLanguageParser.RightShiftArithmetic = 28;
GameMakerLanguageParser.LeftShiftArithmetic = 29;
GameMakerLanguageParser.LessThan = 30;
GameMakerLanguageParser.MoreThan = 31;
GameMakerLanguageParser.LessThanEquals = 32;
GameMakerLanguageParser.GreaterThanEquals = 33;
GameMakerLanguageParser.Equals_ = 34;
GameMakerLanguageParser.NotEquals = 35;
GameMakerLanguageParser.BitAnd = 36;
GameMakerLanguageParser.BitXOr = 37;
GameMakerLanguageParser.BitOr = 38;
GameMakerLanguageParser.And = 39;
GameMakerLanguageParser.Or = 40;
GameMakerLanguageParser.Xor = 41;
GameMakerLanguageParser.MultiplyAssign = 42;
GameMakerLanguageParser.DivideAssign = 43;
GameMakerLanguageParser.PlusAssign = 44;
GameMakerLanguageParser.MinusAssign = 45;
GameMakerLanguageParser.ModulusAssign = 46;
GameMakerLanguageParser.LeftShiftArithmeticAssign = 47;
GameMakerLanguageParser.RightShiftArithmeticAssign = 48;
GameMakerLanguageParser.BitAndAssign = 49;
GameMakerLanguageParser.BitXorAssign = 50;
GameMakerLanguageParser.BitOrAssign = 51;
GameMakerLanguageParser.NumberSign = 52;
GameMakerLanguageParser.DollarSign = 53;
GameMakerLanguageParser.AtSign = 54;
GameMakerLanguageParser.UndefinedLiteral = 55;
GameMakerLanguageParser.NoOneLiteral = 56;
GameMakerLanguageParser.BooleanLiteral = 57;
GameMakerLanguageParser.IntegerLiteral = 58;
GameMakerLanguageParser.DecimalLiteral = 59;
GameMakerLanguageParser.BinaryLiteral = 60;
GameMakerLanguageParser.HexIntegerLiteral = 61;
GameMakerLanguageParser.Break = 62;
GameMakerLanguageParser.Exit = 63;
GameMakerLanguageParser.Do = 64;
GameMakerLanguageParser.Case = 65;
GameMakerLanguageParser.Else = 66;
GameMakerLanguageParser.New = 67;
GameMakerLanguageParser.Var = 68;
GameMakerLanguageParser.Catch = 69;
GameMakerLanguageParser.Finally = 70;
GameMakerLanguageParser.Return = 71;
GameMakerLanguageParser.Continue = 72;
GameMakerLanguageParser.For = 73;
GameMakerLanguageParser.Switch = 74;
GameMakerLanguageParser.While = 75;
GameMakerLanguageParser.Until = 76;
GameMakerLanguageParser.Repeat = 77;
GameMakerLanguageParser.Function_ = 78;
GameMakerLanguageParser.With = 79;
GameMakerLanguageParser.Default = 80;
GameMakerLanguageParser.If = 81;
GameMakerLanguageParser.Then = 82;
GameMakerLanguageParser.Throw = 83;
GameMakerLanguageParser.Delete = 84;
GameMakerLanguageParser.Try = 85;
GameMakerLanguageParser.Enum = 86;
GameMakerLanguageParser.Constructor = 87;
GameMakerLanguageParser.Static = 88;
GameMakerLanguageParser.Macro = 89;
GameMakerLanguageParser.Define = 90;
GameMakerLanguageParser.Region = 91;
GameMakerLanguageParser.EndRegion = 92;
GameMakerLanguageParser.Identifier = 93;
GameMakerLanguageParser.StringLiteral = 94;
GameMakerLanguageParser.VerbatimStringLiteral = 95;
GameMakerLanguageParser.WhiteSpaces = 96;
GameMakerLanguageParser.LineTerminator = 97;
GameMakerLanguageParser.UnexpectedCharacter = 98;
GameMakerLanguageParser.PpIdentifier = 99;
GameMakerLanguageParser.PpWhiteSpaces = 100;
GameMakerLanguageParser.PpBodyCharacters = 101;
GameMakerLanguageParser.PpNewLineEscaped = 102;
GameMakerLanguageParser.PpEnd = 103;

GameMakerLanguageParser.RULE_program = 0;
GameMakerLanguageParser.RULE_statementList = 1;
GameMakerLanguageParser.RULE_statement = 2;
GameMakerLanguageParser.RULE_block = 3;
GameMakerLanguageParser.RULE_ifStatement = 4;
GameMakerLanguageParser.RULE_iterationStatement = 5;
GameMakerLanguageParser.RULE_withStatement = 6;
GameMakerLanguageParser.RULE_switchStatement = 7;
GameMakerLanguageParser.RULE_continueStatement = 8;
GameMakerLanguageParser.RULE_breakStatement = 9;
GameMakerLanguageParser.RULE_exitStatement = 10;
GameMakerLanguageParser.RULE_emptyStatement = 11;
GameMakerLanguageParser.RULE_caseBlock = 12;
GameMakerLanguageParser.RULE_caseClauses = 13;
GameMakerLanguageParser.RULE_caseClause = 14;
GameMakerLanguageParser.RULE_defaultClause = 15;
GameMakerLanguageParser.RULE_returnStatement = 16;
GameMakerLanguageParser.RULE_varDeclarationSequence = 17;
GameMakerLanguageParser.RULE_varModifier = 18;
GameMakerLanguageParser.RULE_varDeclaration = 19;
GameMakerLanguageParser.RULE_expressionStatement = 20;
GameMakerLanguageParser.RULE_assignmentStatement = 21;
GameMakerLanguageParser.RULE_assignableExpression = 22;
GameMakerLanguageParser.RULE_expressionSequence = 23;
GameMakerLanguageParser.RULE_expression = 24;
GameMakerLanguageParser.RULE_anonymousFunction = 25;
GameMakerLanguageParser.RULE_accessorPrefix = 26;
GameMakerLanguageParser.RULE_arguments = 27;
GameMakerLanguageParser.RULE_argument = 28;
GameMakerLanguageParser.RULE_assignmentOperator = 29;
GameMakerLanguageParser.RULE_literal = 30;
GameMakerLanguageParser.RULE_arrayLiteral = 31;
GameMakerLanguageParser.RULE_elementList = 32;
GameMakerLanguageParser.RULE_structLiteral = 33;
GameMakerLanguageParser.RULE_functionDeclaration = 34;
GameMakerLanguageParser.RULE_parameterList = 35;
GameMakerLanguageParser.RULE_parameterArgument = 36;
GameMakerLanguageParser.RULE_propertyAssignment = 37;
GameMakerLanguageParser.RULE_propertyIdentifier = 38;
GameMakerLanguageParser.RULE_identifier = 39;
GameMakerLanguageParser.RULE_constructorDeclaration = 40;
GameMakerLanguageParser.RULE_enumeratorDeclaration = 41;
GameMakerLanguageParser.RULE_enumeratorList = 42;
GameMakerLanguageParser.RULE_enumerator = 43;
GameMakerLanguageParser.RULE_macroStatement = 44;
GameMakerLanguageParser.RULE_macroBody = 45;
GameMakerLanguageParser.RULE_defineStatement = 46;
GameMakerLanguageParser.RULE_regionStatement = 47;
GameMakerLanguageParser.RULE_keyword = 48;
GameMakerLanguageParser.RULE_softKeyword = 49;
GameMakerLanguageParser.RULE_propertySoftKeyword = 50;
GameMakerLanguageParser.RULE_eos = 51;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_program;
    }

	EOF() {
	    return this.getToken(GameMakerLanguageParser.EOF, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitStatementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	emptyStatement() {
	    return this.getTypedRuleContext(EmptyStatementContext,0);
	};

	macroStatement() {
	    return this.getTypedRuleContext(MacroStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	varDeclarationSequence() {
	    return this.getTypedRuleContext(VarDeclarationSequenceContext,0);
	};

	assignmentStatement() {
	    return this.getTypedRuleContext(AssignmentStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	withStatement() {
	    return this.getTypedRuleContext(WithStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	exitStatement() {
	    return this.getTypedRuleContext(ExitStatementContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enumeratorDeclaration() {
	    return this.getTypedRuleContext(EnumeratorDeclarationContext,0);
	};

	defineStatement() {
	    return this.getTypedRuleContext(DefineStatementContext,0);
	};

	regionStatement() {
	    return this.getTypedRuleContext(RegionStatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_block;
    }

	OpenBrace() {
	    return this.getToken(GameMakerLanguageParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(GameMakerLanguageParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_ifStatement;
    }

	If() {
	    return this.getToken(GameMakerLanguageParser.If, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Then() {
	    return this.getToken(GameMakerLanguageParser.Then, 0);
	};

	Else() {
	    return this.getToken(GameMakerLanguageParser.Else, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_iterationStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DoStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Do() {
	    return this.getToken(GameMakerLanguageParser.Do, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Until() {
	    return this.getToken(GameMakerLanguageParser.Until, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.DoStatementContext = DoStatementContext;

class WhileStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	While() {
	    return this.getToken(GameMakerLanguageParser.While, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.WhileStatementContext = WhileStatementContext;

class ForStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(GameMakerLanguageParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(GameMakerLanguageParser.OpenParen, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.SemiColon);
	    } else {
	        return this.getToken(GameMakerLanguageParser.SemiColon, i);
	    }
	};


	CloseParen() {
	    return this.getToken(GameMakerLanguageParser.CloseParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	varDeclarationSequence() {
	    return this.getTypedRuleContext(VarDeclarationSequenceContext,0);
	};

	assignmentStatement() {
	    return this.getTypedRuleContext(AssignmentStatementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.ForStatementContext = ForStatementContext;

class RepeatStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Repeat() {
	    return this.getToken(GameMakerLanguageParser.Repeat, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitRepeatStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.RepeatStatementContext = RepeatStatementContext;

class WithStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_withStatement;
    }

	With() {
	    return this.getToken(GameMakerLanguageParser.With, 0);
	};

	OpenParen() {
	    return this.getToken(GameMakerLanguageParser.OpenParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(GameMakerLanguageParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitWithStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_switchStatement;
    }

	Switch() {
	    return this.getToken(GameMakerLanguageParser.Switch, 0);
	};

	OpenParen() {
	    return this.getToken(GameMakerLanguageParser.OpenParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(GameMakerLanguageParser.CloseParen, 0);
	};

	caseBlock() {
	    return this.getTypedRuleContext(CaseBlockContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitSwitchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_continueStatement;
    }

	Continue() {
	    return this.getToken(GameMakerLanguageParser.Continue, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_breakStatement;
    }

	Break() {
	    return this.getToken(GameMakerLanguageParser.Break, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_exitStatement;
    }

	Exit() {
	    return this.getToken(GameMakerLanguageParser.Exit, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitExitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_emptyStatement;
    }

	SemiColon() {
	    return this.getToken(GameMakerLanguageParser.SemiColon, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitEmptyStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_caseBlock;
    }

	OpenBrace() {
	    return this.getToken(GameMakerLanguageParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(GameMakerLanguageParser.CloseBrace, 0);
	};

	caseClauses = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClausesContext);
	    } else {
	        return this.getTypedRuleContext(CaseClausesContext,i);
	    }
	};

	defaultClause() {
	    return this.getTypedRuleContext(DefaultClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitCaseBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_caseClauses;
    }

	caseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(CaseClauseContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitCaseClauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_caseClause;
    }

	Case() {
	    return this.getToken(GameMakerLanguageParser.Case, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	Colon() {
	    return this.getToken(GameMakerLanguageParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitCaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_defaultClause;
    }

	Default() {
	    return this.getToken(GameMakerLanguageParser.Default, 0);
	};

	Colon() {
	    return this.getToken(GameMakerLanguageParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitDefaultClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_returnStatement;
    }

	Return() {
	    return this.getToken(GameMakerLanguageParser.Return, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarDeclarationSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_varDeclarationSequence;
    }

	varModifier() {
	    return this.getTypedRuleContext(VarModifierContext,0);
	};

	varDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VarDeclarationContext,i);
	    }
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.Comma);
	    } else {
	        return this.getToken(GameMakerLanguageParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitVarDeclarationSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_varModifier;
    }

	Var = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.Var);
	    } else {
	        return this.getToken(GameMakerLanguageParser.Var, i);
	    }
	};


	Static() {
	    return this.getToken(GameMakerLanguageParser.Static, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitVarModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_varDeclaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Assign() {
	    return this.getToken(GameMakerLanguageParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitVarDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_expressionStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_assignmentStatement;
    }

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitAssignmentStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_assignableExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MemberDotAssignableContext extends AssignableExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	Dot() {
	    return this.getToken(GameMakerLanguageParser.Dot, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitMemberDotAssignable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.MemberDotAssignableContext = MemberDotAssignableContext;

class MemberIndexAssignableContext extends AssignableExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	OpenBracket() {
	    return this.getToken(GameMakerLanguageParser.OpenBracket, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseBracket() {
	    return this.getToken(GameMakerLanguageParser.CloseBracket, 0);
	};

	accessorPrefix() {
	    return this.getTypedRuleContext(AccessorPrefixContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitMemberIndexAssignable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.MemberIndexAssignableContext = MemberIndexAssignableContext;

class IdentifierAssignableContext extends AssignableExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitIdentifierAssignable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.IdentifierAssignableContext = IdentifierAssignableContext;

class ParenthesizedAssignableContext extends AssignableExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(GameMakerLanguageParser.OpenParen, 0);
	};

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(GameMakerLanguageParser.CloseParen, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitParenthesizedAssignable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.ParenthesizedAssignableContext = ParenthesizedAssignableContext;

class ExpressionSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_expressionSequence;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.Comma);
	    } else {
	        return this.getToken(GameMakerLanguageParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitExpressionSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TernaryExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	QuestionMark() {
	    return this.getToken(GameMakerLanguageParser.QuestionMark, 0);
	};

	Colon() {
	    return this.getToken(GameMakerLanguageParser.Colon, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitTernaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.TernaryExpressionContext = TernaryExpressionContext;

class LogicalAndExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	And() {
	    return this.getToken(GameMakerLanguageParser.And, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitLogicalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

class PreIncrementExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PlusPlus() {
	    return this.getToken(GameMakerLanguageParser.PlusPlus, 0);
	};

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitPreIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

class LogicalOrExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Or() {
	    return this.getToken(GameMakerLanguageParser.Or, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitLogicalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

class NotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Not() {
	    return this.getToken(GameMakerLanguageParser.Not, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.NotExpressionContext = NotExpressionContext;

class PreDecreaseExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MinusMinus() {
	    return this.getToken(GameMakerLanguageParser.MinusMinus, 0);
	};

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitPreDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

class ArgumentsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitArgumentsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

class FunctionExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	anonymousFunction() {
	    return this.getTypedRuleContext(AnonymousFunctionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.FunctionExpressionContext = FunctionExpressionContext;

class PostDecreaseExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	MinusMinus() {
	    return this.getToken(GameMakerLanguageParser.MinusMinus, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitPostDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

class UnaryMinusExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Minus() {
	    return this.getToken(GameMakerLanguageParser.Minus, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitUnaryMinusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

class DeleteExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Delete() {
	    return this.getToken(GameMakerLanguageParser.Delete, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitDeleteExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.DeleteExpressionContext = DeleteExpressionContext;

class EqualityExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Equals_() {
	    return this.getToken(GameMakerLanguageParser.Equals_, 0);
	};

	Assign() {
	    return this.getToken(GameMakerLanguageParser.Assign, 0);
	};

	NotEquals() {
	    return this.getToken(GameMakerLanguageParser.NotEquals, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.EqualityExpressionContext = EqualityExpressionContext;

class BitXOrExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	BitXOr() {
	    return this.getToken(GameMakerLanguageParser.BitXOr, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitBitXOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.BitXOrExpressionContext = BitXOrExpressionContext;

class MultiplicativeExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Multiply() {
	    return this.getToken(GameMakerLanguageParser.Multiply, 0);
	};

	Divide() {
	    return this.getToken(GameMakerLanguageParser.Divide, 0);
	};

	Modulo() {
	    return this.getToken(GameMakerLanguageParser.Modulo, 0);
	};

	IntegerDivide() {
	    return this.getToken(GameMakerLanguageParser.IntegerDivide, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

class BitShiftExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LeftShiftArithmetic() {
	    return this.getToken(GameMakerLanguageParser.LeftShiftArithmetic, 0);
	};

	RightShiftArithmetic() {
	    return this.getToken(GameMakerLanguageParser.RightShiftArithmetic, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitBitShiftExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.BitShiftExpressionContext = BitShiftExpressionContext;

class ParenthesizedExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(GameMakerLanguageParser.OpenParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(GameMakerLanguageParser.CloseParen, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitParenthesizedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class PostIncrementExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	PlusPlus() {
	    return this.getToken(GameMakerLanguageParser.PlusPlus, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitPostIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

class AdditiveExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Plus() {
	    return this.getToken(GameMakerLanguageParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(GameMakerLanguageParser.Minus, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.AdditiveExpressionContext = AdditiveExpressionContext;

class RelationalExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LessThan() {
	    return this.getToken(GameMakerLanguageParser.LessThan, 0);
	};

	MoreThan() {
	    return this.getToken(GameMakerLanguageParser.MoreThan, 0);
	};

	LessThanEquals() {
	    return this.getToken(GameMakerLanguageParser.LessThanEquals, 0);
	};

	GreaterThanEquals() {
	    return this.getToken(GameMakerLanguageParser.GreaterThanEquals, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitRelationalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.RelationalExpressionContext = RelationalExpressionContext;

class BitNotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BitNot() {
	    return this.getToken(GameMakerLanguageParser.BitNot, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitBitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.BitNotExpressionContext = BitNotExpressionContext;

class NewExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(GameMakerLanguageParser.New, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitNewExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.NewExpressionContext = NewExpressionContext;

class LiteralExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.LiteralExpressionContext = LiteralExpressionContext;

class MemberDotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Dot() {
	    return this.getToken(GameMakerLanguageParser.Dot, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitMemberDotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.MemberDotExpressionContext = MemberDotExpressionContext;

class MemberIndexExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	OpenBracket() {
	    return this.getToken(GameMakerLanguageParser.OpenBracket, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseBracket() {
	    return this.getToken(GameMakerLanguageParser.CloseBracket, 0);
	};

	accessorPrefix() {
	    return this.getTypedRuleContext(AccessorPrefixContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitMemberIndexExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

class IdentifierExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitIdentifierExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.IdentifierExpressionContext = IdentifierExpressionContext;

class BitAndExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	BitAnd() {
	    return this.getToken(GameMakerLanguageParser.BitAnd, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitBitAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.BitAndExpressionContext = BitAndExpressionContext;

class LogicalXorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Xor() {
	    return this.getToken(GameMakerLanguageParser.Xor, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitLogicalXorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.LogicalXorExpressionContext = LogicalXorExpressionContext;

class BitOrExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	BitOr() {
	    return this.getToken(GameMakerLanguageParser.BitOr, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitBitOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.BitOrExpressionContext = BitOrExpressionContext;

class CoalesceExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	NullCoalesce() {
	    return this.getToken(GameMakerLanguageParser.NullCoalesce, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitCoalesceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

GameMakerLanguageParser.CoalesceExpressionContext = CoalesceExpressionContext;

class AnonymousFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_anonymousFunction;
    }

	Function_() {
	    return this.getToken(GameMakerLanguageParser.Function_, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitAnonymousFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AccessorPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_accessorPrefix;
    }

	NumberSign() {
	    return this.getToken(GameMakerLanguageParser.NumberSign, 0);
	};

	AtSign() {
	    return this.getToken(GameMakerLanguageParser.AtSign, 0);
	};

	DollarSign() {
	    return this.getToken(GameMakerLanguageParser.DollarSign, 0);
	};

	QuestionMark() {
	    return this.getToken(GameMakerLanguageParser.QuestionMark, 0);
	};

	BitOr() {
	    return this.getToken(GameMakerLanguageParser.BitOr, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitAccessorPrefix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_arguments;
    }

	OpenParen() {
	    return this.getToken(GameMakerLanguageParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(GameMakerLanguageParser.CloseParen, 0);
	};

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.Comma);
	    } else {
	        return this.getToken(GameMakerLanguageParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_argument;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_assignmentOperator;
    }

	MultiplyAssign() {
	    return this.getToken(GameMakerLanguageParser.MultiplyAssign, 0);
	};

	DivideAssign() {
	    return this.getToken(GameMakerLanguageParser.DivideAssign, 0);
	};

	ModulusAssign() {
	    return this.getToken(GameMakerLanguageParser.ModulusAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(GameMakerLanguageParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(GameMakerLanguageParser.MinusAssign, 0);
	};

	LeftShiftArithmeticAssign() {
	    return this.getToken(GameMakerLanguageParser.LeftShiftArithmeticAssign, 0);
	};

	RightShiftArithmeticAssign() {
	    return this.getToken(GameMakerLanguageParser.RightShiftArithmeticAssign, 0);
	};

	BitAndAssign() {
	    return this.getToken(GameMakerLanguageParser.BitAndAssign, 0);
	};

	BitXorAssign() {
	    return this.getToken(GameMakerLanguageParser.BitXorAssign, 0);
	};

	BitOrAssign() {
	    return this.getToken(GameMakerLanguageParser.BitOrAssign, 0);
	};

	NullCoalescingAssign() {
	    return this.getToken(GameMakerLanguageParser.NullCoalescingAssign, 0);
	};

	Assign() {
	    return this.getToken(GameMakerLanguageParser.Assign, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitAssignmentOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_literal;
    }

	UndefinedLiteral() {
	    return this.getToken(GameMakerLanguageParser.UndefinedLiteral, 0);
	};

	NoOneLiteral() {
	    return this.getToken(GameMakerLanguageParser.NoOneLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(GameMakerLanguageParser.BooleanLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(GameMakerLanguageParser.StringLiteral, 0);
	};

	VerbatimStringLiteral() {
	    return this.getToken(GameMakerLanguageParser.VerbatimStringLiteral, 0);
	};

	HexIntegerLiteral() {
	    return this.getToken(GameMakerLanguageParser.HexIntegerLiteral, 0);
	};

	BinaryLiteral() {
	    return this.getToken(GameMakerLanguageParser.BinaryLiteral, 0);
	};

	DecimalLiteral() {
	    return this.getToken(GameMakerLanguageParser.DecimalLiteral, 0);
	};

	IntegerLiteral() {
	    return this.getToken(GameMakerLanguageParser.IntegerLiteral, 0);
	};

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	structLiteral() {
	    return this.getTypedRuleContext(StructLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_arrayLiteral;
    }

	OpenBracket() {
	    return this.getToken(GameMakerLanguageParser.OpenBracket, 0);
	};

	elementList() {
	    return this.getTypedRuleContext(ElementListContext,0);
	};

	CloseBracket() {
	    return this.getToken(GameMakerLanguageParser.CloseBracket, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitArrayLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_elementList;
    }

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.Comma);
	    } else {
	        return this.getToken(GameMakerLanguageParser.Comma, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_structLiteral;
    }

	OpenBrace() {
	    return this.getToken(GameMakerLanguageParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(GameMakerLanguageParser.CloseBrace, 0);
	};

	propertyAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(PropertyAssignmentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.Comma);
	    } else {
	        return this.getToken(GameMakerLanguageParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitStructLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_functionDeclaration;
    }

	Function_() {
	    return this.getToken(GameMakerLanguageParser.Function_, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitFunctionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_parameterList;
    }

	OpenParen() {
	    return this.getToken(GameMakerLanguageParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(GameMakerLanguageParser.CloseParen, 0);
	};

	parameterArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ParameterArgumentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.Comma);
	    } else {
	        return this.getToken(GameMakerLanguageParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_parameterArgument;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Assign() {
	    return this.getToken(GameMakerLanguageParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitParameterArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_propertyAssignment;
    }

	propertyIdentifier() {
	    return this.getTypedRuleContext(PropertyIdentifierContext,0);
	};

	Colon() {
	    return this.getToken(GameMakerLanguageParser.Colon, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitPropertyAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_propertyIdentifier;
    }

	Identifier() {
	    return this.getToken(GameMakerLanguageParser.Identifier, 0);
	};

	softKeyword() {
	    return this.getTypedRuleContext(SoftKeywordContext,0);
	};

	propertySoftKeyword() {
	    return this.getTypedRuleContext(PropertySoftKeywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitPropertyIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(GameMakerLanguageParser.Identifier, 0);
	};

	softKeyword() {
	    return this.getTypedRuleContext(SoftKeywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_constructorDeclaration;
    }

	Function_() {
	    return this.getToken(GameMakerLanguageParser.Function_, 0);
	};

	parameterList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterListContext);
	    } else {
	        return this.getTypedRuleContext(ParameterListContext,i);
	    }
	};

	Constructor() {
	    return this.getToken(GameMakerLanguageParser.Constructor, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	Colon() {
	    return this.getToken(GameMakerLanguageParser.Colon, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitConstructorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumeratorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_enumeratorDeclaration;
    }

	Enum() {
	    return this.getToken(GameMakerLanguageParser.Enum, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenBrace() {
	    return this.getToken(GameMakerLanguageParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(GameMakerLanguageParser.CloseBrace, 0);
	};

	enumeratorList() {
	    return this.getTypedRuleContext(EnumeratorListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitEnumeratorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumeratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_enumeratorList;
    }

	enumerator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumeratorContext);
	    } else {
	        return this.getTypedRuleContext(EnumeratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.Comma);
	    } else {
	        return this.getToken(GameMakerLanguageParser.Comma, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitEnumeratorList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumeratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_enumerator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Assign() {
	    return this.getToken(GameMakerLanguageParser.Assign, 0);
	};

	IntegerLiteral() {
	    return this.getToken(GameMakerLanguageParser.IntegerLiteral, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitEnumerator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_macroStatement;
    }

	Macro() {
	    return this.getToken(GameMakerLanguageParser.Macro, 0);
	};

	PpIdentifier() {
	    return this.getToken(GameMakerLanguageParser.PpIdentifier, 0);
	};

	macroBody() {
	    return this.getTypedRuleContext(MacroBodyContext,0);
	};

	PpEnd() {
	    return this.getToken(GameMakerLanguageParser.PpEnd, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitMacroStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_macroBody;
    }

	PpBodyCharacters = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.PpBodyCharacters);
	    } else {
	        return this.getToken(GameMakerLanguageParser.PpBodyCharacters, i);
	    }
	};


	PpNewLineEscaped = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.PpNewLineEscaped);
	    } else {
	        return this.getToken(GameMakerLanguageParser.PpNewLineEscaped, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitMacroBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefineStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_defineStatement;
    }

	Define() {
	    return this.getToken(GameMakerLanguageParser.Define, 0);
	};

	PpIdentifier() {
	    return this.getToken(GameMakerLanguageParser.PpIdentifier, 0);
	};

	PpEnd() {
	    return this.getToken(GameMakerLanguageParser.PpEnd, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitDefineStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RegionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_regionStatement;
    }

	Region() {
	    return this.getToken(GameMakerLanguageParser.Region, 0);
	};

	EndRegion() {
	    return this.getToken(GameMakerLanguageParser.EndRegion, 0);
	};

	PpBodyCharacters = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GameMakerLanguageParser.PpBodyCharacters);
	    } else {
	        return this.getToken(GameMakerLanguageParser.PpBodyCharacters, i);
	    }
	};


	PpEnd() {
	    return this.getToken(GameMakerLanguageParser.PpEnd, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitRegionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_keyword;
    }

	Break() {
	    return this.getToken(GameMakerLanguageParser.Break, 0);
	};

	Do() {
	    return this.getToken(GameMakerLanguageParser.Do, 0);
	};

	Case() {
	    return this.getToken(GameMakerLanguageParser.Case, 0);
	};

	Else() {
	    return this.getToken(GameMakerLanguageParser.Else, 0);
	};

	New() {
	    return this.getToken(GameMakerLanguageParser.New, 0);
	};

	Var() {
	    return this.getToken(GameMakerLanguageParser.Var, 0);
	};

	Catch() {
	    return this.getToken(GameMakerLanguageParser.Catch, 0);
	};

	Finally() {
	    return this.getToken(GameMakerLanguageParser.Finally, 0);
	};

	Return() {
	    return this.getToken(GameMakerLanguageParser.Return, 0);
	};

	Continue() {
	    return this.getToken(GameMakerLanguageParser.Continue, 0);
	};

	For() {
	    return this.getToken(GameMakerLanguageParser.For, 0);
	};

	Switch() {
	    return this.getToken(GameMakerLanguageParser.Switch, 0);
	};

	While() {
	    return this.getToken(GameMakerLanguageParser.While, 0);
	};

	Function_() {
	    return this.getToken(GameMakerLanguageParser.Function_, 0);
	};

	With() {
	    return this.getToken(GameMakerLanguageParser.With, 0);
	};

	Default() {
	    return this.getToken(GameMakerLanguageParser.Default, 0);
	};

	If() {
	    return this.getToken(GameMakerLanguageParser.If, 0);
	};

	Throw() {
	    return this.getToken(GameMakerLanguageParser.Throw, 0);
	};

	Delete() {
	    return this.getToken(GameMakerLanguageParser.Delete, 0);
	};

	Try() {
	    return this.getToken(GameMakerLanguageParser.Try, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SoftKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_softKeyword;
    }

	Constructor() {
	    return this.getToken(GameMakerLanguageParser.Constructor, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitSoftKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertySoftKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_propertySoftKeyword;
    }

	NoOneLiteral() {
	    return this.getToken(GameMakerLanguageParser.NoOneLiteral, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitPropertySoftKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EosContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GameMakerLanguageParser.RULE_eos;
    }

	SemiColon() {
	    return this.getToken(GameMakerLanguageParser.SemiColon, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof GameMakerLanguageParserVisitor ) {
	        return visitor.visitEos(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




GameMakerLanguageParser.ProgramContext = ProgramContext; 
GameMakerLanguageParser.StatementListContext = StatementListContext; 
GameMakerLanguageParser.StatementContext = StatementContext; 
GameMakerLanguageParser.BlockContext = BlockContext; 
GameMakerLanguageParser.IfStatementContext = IfStatementContext; 
GameMakerLanguageParser.IterationStatementContext = IterationStatementContext; 
GameMakerLanguageParser.WithStatementContext = WithStatementContext; 
GameMakerLanguageParser.SwitchStatementContext = SwitchStatementContext; 
GameMakerLanguageParser.ContinueStatementContext = ContinueStatementContext; 
GameMakerLanguageParser.BreakStatementContext = BreakStatementContext; 
GameMakerLanguageParser.ExitStatementContext = ExitStatementContext; 
GameMakerLanguageParser.EmptyStatementContext = EmptyStatementContext; 
GameMakerLanguageParser.CaseBlockContext = CaseBlockContext; 
GameMakerLanguageParser.CaseClausesContext = CaseClausesContext; 
GameMakerLanguageParser.CaseClauseContext = CaseClauseContext; 
GameMakerLanguageParser.DefaultClauseContext = DefaultClauseContext; 
GameMakerLanguageParser.ReturnStatementContext = ReturnStatementContext; 
GameMakerLanguageParser.VarDeclarationSequenceContext = VarDeclarationSequenceContext; 
GameMakerLanguageParser.VarModifierContext = VarModifierContext; 
GameMakerLanguageParser.VarDeclarationContext = VarDeclarationContext; 
GameMakerLanguageParser.ExpressionStatementContext = ExpressionStatementContext; 
GameMakerLanguageParser.AssignmentStatementContext = AssignmentStatementContext; 
GameMakerLanguageParser.AssignableExpressionContext = AssignableExpressionContext; 
GameMakerLanguageParser.ExpressionSequenceContext = ExpressionSequenceContext; 
GameMakerLanguageParser.ExpressionContext = ExpressionContext; 
GameMakerLanguageParser.AnonymousFunctionContext = AnonymousFunctionContext; 
GameMakerLanguageParser.AccessorPrefixContext = AccessorPrefixContext; 
GameMakerLanguageParser.ArgumentsContext = ArgumentsContext; 
GameMakerLanguageParser.ArgumentContext = ArgumentContext; 
GameMakerLanguageParser.AssignmentOperatorContext = AssignmentOperatorContext; 
GameMakerLanguageParser.LiteralContext = LiteralContext; 
GameMakerLanguageParser.ArrayLiteralContext = ArrayLiteralContext; 
GameMakerLanguageParser.ElementListContext = ElementListContext; 
GameMakerLanguageParser.StructLiteralContext = StructLiteralContext; 
GameMakerLanguageParser.FunctionDeclarationContext = FunctionDeclarationContext; 
GameMakerLanguageParser.ParameterListContext = ParameterListContext; 
GameMakerLanguageParser.ParameterArgumentContext = ParameterArgumentContext; 
GameMakerLanguageParser.PropertyAssignmentContext = PropertyAssignmentContext; 
GameMakerLanguageParser.PropertyIdentifierContext = PropertyIdentifierContext; 
GameMakerLanguageParser.IdentifierContext = IdentifierContext; 
GameMakerLanguageParser.ConstructorDeclarationContext = ConstructorDeclarationContext; 
GameMakerLanguageParser.EnumeratorDeclarationContext = EnumeratorDeclarationContext; 
GameMakerLanguageParser.EnumeratorListContext = EnumeratorListContext; 
GameMakerLanguageParser.EnumeratorContext = EnumeratorContext; 
GameMakerLanguageParser.MacroStatementContext = MacroStatementContext; 
GameMakerLanguageParser.MacroBodyContext = MacroBodyContext; 
GameMakerLanguageParser.DefineStatementContext = DefineStatementContext; 
GameMakerLanguageParser.RegionStatementContext = RegionStatementContext; 
GameMakerLanguageParser.KeywordContext = KeywordContext; 
GameMakerLanguageParser.SoftKeywordContext = SoftKeywordContext; 
GameMakerLanguageParser.PropertySoftKeywordContext = PropertySoftKeywordContext; 
GameMakerLanguageParser.EosContext = EosContext; 
